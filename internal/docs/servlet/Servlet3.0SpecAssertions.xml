<?xml version="1.0" encoding="US-ASCII"?>
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<spec>
    <next-available-id>248</next-available-id>
    <previous-id>247</previous-id>
    <technology>Servlet</technology>
    <id>Servlet</id>
    <name>Java(TM) Servlet</name>
    <version>3.0</version>
    <location-names>
        <chapters>
            <chapter id="1" name="Overview">
                <sections>
                    <section id="1" name="What is a Servlet?"/>
                    <section id="2" name="What is a Servlet Container"/>
                    <section id="3" name="An Example"/>
                    <section id="4" name="Comparing Servlets with Other Technologies"/>
                    <section id="5" name="Relationship to Java 2, Platform Enterprise Edition"/>
                    <section id="6" name="Compatibility with Java Servlet Specification Version 2.5"/>
                    <section id="6.1" name="Listener ordering"/>
                    <section id="6.2" name="Processing annotations"/>
                </sections>
            </chapter>
            <chapter id="2" name="The Servlet Interface">
                <sections>
                    <section id="1" name="Request Handling Methods"/>
                    <section id="1.1" name="HTTP Specific Request Handling Methods"/>
                    <section id="1.2" name="Additional Methods"/>
                    <section id="1.3" name="Conditional GET Support"/>
                    <section id="2" name="Number of Instances"/>
                    <section id="2.1" name="Note About Single Thread Model"/>
                    <section id="3" name="Servlet Life Cycle"/>
                    <section id="3.1" name="Loading and Instantiation"/>
                    <section id="3.2" name="Initialization"/>
                    <section id="3.2.1" name="Error Conditions on Initialization"/>
                    <section id="3.2.2" name="Tool Consideration"/>
                    <section id="3.3" name="Request Handling"/>
                    <section id="3.3.1" name="Multithreading Issues"/>
                    <section id="3.3.2" name="Exceptions During Request Handling"/>
                    <section id="3.3.3" name="Asynchronous processing"/>
                    <section id="3.3.4" name="Thread Safety"/>
                    <section id="3.4" name="End of Service"/>
                </sections>
            </chapter>
            <chapter id="3" name="The Request">
                <sections>
                    <section id="1" name="HTTP Protocol Parameters"/>
                    <section id="1.1" name="When Parameters Are Available"/>
                    <section id="2" name="File upload"/>
                    <section id="3" name="Attributes"/>
                    <section id="4" name="Headers"/>
                    <section id="5" name="Request Path Elements"/>
                    <section id="6" name="Path Translation Methods"/>
                    <section id="7" name="Cookies"/>
                    <section id="8" name="SSL Attributes"/>
                    <section id="9" name="Internationalization"/>
                    <section id="10" name="Request data encoding"/>
                    <section id="11" name="Lifetime of the Request Object"/>
                </sections>
            </chapter>
            <chapter id="4" name="Servlet Context">
                <sections>
                    <section id="1" name="Introduction to the ServletContext Interface"/>
                    <section id="2" name="Scope of a ServletContext Interface"/>
                    <section id="3" name="Initialization Parameters"/>
                    <section id="4" name="Configuration methods"/>
                    <section id="4.1" name="Programmatically adding and configuring Servlets"/>
                    <section id="4.1.1" name="addServlet(String servletName, String className)"/>
                    <section id="4.1.2" name="addServlet(String servletName, Servlet servlet)"/>
                    <section id="4.1.3" name="addServlet(String servletName, Class &lt;? extends Servlet&gt; servletClass)" />
                    <section id="4.1.4" name="&lt;T extends Servlet&gt; T createServlet(Class&lt;T&gt; clazz) "/>
                    <section id="4.1.5" name="ServletRegistration getServletRegistration(String servletName)"/>
                    <section id="4.1.6" name="Map&lt;String, &lt;? extends ServletRegistration&gt; getServletRegistrations()"/>
                    <section id="4.2" name="Programmatically adding and configuring Filters"/>
                    <section id="4.2.1" name="addFilter(String filterName, String className)"/>
                    <section id="4.2.2" name="addFilter(String filterName, Filter filter)"/>
                    <section id="4.2.3" name="addFilter(String filterName, Class &lt;? extends Filter&gt; filterClass)"/>
                    <section id="4.2.4" name="&lt;T extends Filter&gt; T createFilter(Class&lt;T&gt; clazz)"/>
                    <section id="4.2.5" name="FilterRegistration getFilterRegistration(String filterName)"/>
                    <section id="4.2.6" name="Map&lt;String, &lt;? extends FilterRegistration&gt; getServletRegistrations()"/>
                    <section id="4.3" name="Programmatically adding and configuring Listeners"/>
                    <section id="4.3.1" name="void addListener(String className)"/>
                    <section id="4.3.2" name="&lt;T extends EventListener&gt; void addListener(T t)"/>
                    <section id="4.3.3" name="void addListener(Class &lt;? extends EventListener&gt; listenerClass)"/>
                    <section id="4.3.4" name="&lt;T extends EventListener&gt; void createListener(Class&lt;T&gt; clazz)"/>
                    <section id="4.3.5" name="Annotation processing requirements for programmatically added Servlets, Filters and Listeners"/>
                    <section id="5" name="Context Attributes"/>
                    <section id="5.1" name="Context Attributes in a Distributed Container"/>
                    <section id="6" name="Resources"/>
                    <section id="7" name="Multiple Hosts and Servlet Contexts"/>
                    <section id="8" name="Reloading Considerations"/>
                    <section id="8.1" name="Temporary Working Directories"/>
                </sections>
            </chapter>
            <chapter id="5" name="The Response">
                <sections>
                    <section id="1" name="Buffering"/>
                    <section id="2" name="Headers"/>
                    <section id="3" name="Convenience Methods"/>
                    <section id="4" name="Internationalization"/>
                    <section id="5" name="Closure of Response Object"/>
                    <section id="6" name="Lifetime of the Response Object"/>
                </sections>
            </chapter>
            <chapter id="6" name="Filtering">
                <sections>
                    <section id="1" name="What is a filter?"/>
                    <section id="1.1" name="Examples of Filtering Components"/>
                    <section id="2" name="Main Concepts"/>
                    <section id="2.1" name="Filter Lifecycle"/>
                    <section id="2.2" name="Wrapping Requests and Responses"/>
                    <section id="2.3" name="Filter Environment"/>
                    <section id="2.4" name="Configuration of Filters in a Web Application"/>
                    <section id="2.5" name="Filters and the RequestDispatcher"/>
                </sections>
            </chapter>
            <chapter id="7" name="Sessions">
                <sections>
                    <section id="1" name="Session Tracking Mechanisms"/>
                    <section id="1.1" name="Cookies"/>
                    <section id="1.2" name="SSL Sessions"/>
                    <section id="1.3" name="URL Rewriting"/>
                    <section id="1.4" name="Session Integrity"/>
                    <section id="2" name="Creating a Session"/>
                    <section id="3" name="Session Scope"/>
                    <section id="4" name="Binding Attributes into a Session"/>
                    <section id="5" name="Session Timeouts"/>
                    <section id="6" name="Last Accessed Times"/>
                    <section id="7" name="Important Session Semantics"/>
                    <section id="7.1" name="Threading Issues"/>
                    <section id="7.2" name="Distributed Environments"/>
                    <section id="7.3" name="Client Semantics"/>
                </sections>
            </chapter>
            <chapter id="8" name="Annotations and pluggability">
                <sections>
                    <section id="1" name="Annotations and pluggability"/>
                    <section id="1.1" name="@WebServlet"/>
                    <section id="1.2" name="@WebFilter"/>
                    <section id="1.3" name="@WebInitParam"/>
                    <section id="1.4" name="@WebListener"/>
                    <section id="1.5" name="@MultipartConfig"/>
                    <section id="1.6" name="Other annotations/conventions"/>
                    <section id="2" name="Pluggability"/>
                    <section id="2.1" name="Modularity of web.xml"/>
                    <section id="2.2" name="Ordering of web.xml and web-fragment.xml"/>
                    <section id="2.3" name="Assembling the descriptor from web.xml, web-fragment.xml and annotations"/>
                    <section id="2.4" name="Shared libraries / runtimes pluggability"/>
                    <section id="3" name="JSP container pluggability"/>
                    <section id="4" name="Processing annotations and fragments"/>
                </sections>
            </chapter>
            <chapter id="9" name="Dispatching Requests">
                <sections>
                    <section id="1" name="Obtaining a RequestDispatcher"/>
                    <section id="1.1" name="Query Strings in Request Dispatcher Paths"/>
                    <section id="2" name="Using a Request Dispatcher"/>
                    <section id="3" name="The Include Method"/>
                    <section id="3.1" name="Included Request Parameters"/>
                    <section id="4" name="The Forward Method"/>
                    <section id="4.1" name="Query String"/>
                    <section id="4.2" name="Forwarded Request Parameters"/>
                    <section id="5" name="Error Handling"/>
                    <section id="6" name="Obtaining an AsyncContext"/>
                    <section id="7" name="The Dispatch Method"/>
                    <section id="7.1" name="Query String"/>
                    <section id="7.2" name="Dispatched Request Parameters"/>
                </sections>
            </chapter>
            <chapter id="10" name="Web Applications">
                <sections>
                    <section id="1" name="Web Applications Within Web Servers"/>
                    <section id="2" name="Relationship to ServletContext"/>
                    <section id="3" name="Elements of a Web Application"/>
                    <section id="4" name="Deployment Hierarchies"/>
                    <section id="5" name="Directory Structure"/>
                    <section id="5.1" name="Example of Application Directory Structure"/>
                    <section id="6" name="Web Application Archive File"/>
                    <section id="7" name="Web Application Deployment Descriptor"/>
                    <section id="7.1" name="Dependencies on Extensions"/>
                    <section id="7.2" name="Web Application Classloader"/>
                    <section id="8" name="Replacing a Web Application"/>
                    <section id="9" name="Error Handling"/>
                    <section id="9.1" name="Request Attributes"/>
                    <section id="9.2" name="Error Pages"/>
                    <section id="9.3" name="Error Filters"/>
                    <section id="10" name="Welcome Files"/>
                    <section id="11" name="Web Application Environment"/>
                    <section id="12" name="Web Applicaation Deployment"/>
                    <section id="13" name="Inclusion of a web.xml Deployment Descriptor"/>
                </sections>
            </chapter>
            <chapter id="11" name="Application Lifecycle Events">
                <sections>
                    <section id="1" name="Introduction"/>
                    <section id="2" name="Event Listeners"/>
                    <section id="2.1" name="Event Types and Listener Interfaces"/>
                    <section id="2.2" name="An Example of Listener Use"/>
                    <section id="3" name="Listener Class Configuration"/>
                    <section id="3.1" name="Provision of Listener Classes"/>
                    <section id="3.2" name="Deployment Declarations"/>
                    <section id="3.3" name="Listener Registration"/>
                    <section id="3.4" name="Notification At Shutdown"/>
                    <section id="4" name="Deployment Descriptor Example"/>
                    <section id="5" name="Listener Instances and Threading"/>
                    <section id="6" name="Listener Exceptions"/>
                    <section id="7" name="Distributed Containers"/>
                    <section id="8" name="Session Events"/>
                </sections>
            </chapter>
            <chapter id="12" name="Mapping Requests to Servlets">
                <sections>
                    <section id="1" name="Use of URL Paths"/>
                    <section id="2" name="Specification of Mappings"/>
                    <section id="2.1" name="Implicit Mappings"/>
                    <section id="2.2" name="Example Mapping Set"/>
                </sections>
            </chapter>
            <chapter id="13" name="Security">
                <sections>
                    <section id="1" name="Introduction"/>
                    <section id="2" name="Declarative Security"/>
                    <section id="3" name="Programmatic Security"/>
                    <section id="4" name="Programmatic Access Control Annotations"/>
                    <section id="4.1" name="@ServletSecurity Annotation"/>
                    <section id="4.1.1" name="Examples"/>
                    <section id="4.1.2" name="Mapping @ServletSecurity to security-constraint"/>
                    <section id="4.1.3" name="Mapping @HttpConstraint and @HttpMethodConstraint to XML"/>
                    <section id="4.2" name="setServletSecurity of ServletRegistration.Dynamic"/>
                    <section id="5" name="Roles"/>
                    <section id="6" name="Authentication"/>
                    <section id="6.1" name="HTTP Basic Authentication"/>
                    <section id="6.2" name="HTTP Digest Authentication"/>
                    <section id="6.3" name="Form Based Authentication"/>
                    <section id="6.3.1" name="Login Form Notes"/>
                    <section id="6.4" name="HTTPS Client Authentication"/>
                    <section id="6.5" name="Additional Container Authentication Mechanisms"/>
                    <section id="7" name="Server Tracking of Authentication Information"/>
                    <section id="8" name="Specifying Security Constraints"/>
                    <section id="8.1" name="Combining Overlapping Constraints"/>
                    <section id="8.2" name="Example"/>
                    <section id="8.3" name="Processing Requests"/>
                    <section id="9" name="Default Policies"/>
                    <section id="10" name="Login and Logout"/>
                </sections>
            </chapter>
            <chapter id="14" name="Deployment Descriptor">
                <sections>
                    <section id="1" name="Deployment Descriptor Elements"/>
                    <section id="2" name="Rules for Processing the Deployment Descriptor"/>
                    <section id="3" name="Deployment Descriptor"/>
                    <section id="4" name="Deployment Descriptor Diagram"/>
                    <section id="5" name="Examples"/>
                    <section id="5.1" name="A Basic Example"/>
                    <section id="5.2" name="An Example of Security"/>
                </sections>
            </chapter>
            <chapter id="15" name="Requirements related to other Specifications">
                <sections>
                    <section id="1" name="Sessions"/>
                    <section id="2" name="Web Applications"/>
                    <section id="2.1" name="Web Application Class Loader"/>
                    <section id="2.2" name="Web Application Environment"/>
                    <section id="2.3" name="JNDI Name for Web Module Context Root URL"/>
                    <section id="3" name="Security"/>
                    <section id="3.1" name="Propagation of Security Identity in EJB Calls"/>
                    <section id="3.2" name="Container Authorization Requirements"/>
                    <section id="3.3" name="Container Authentication Requirements"/>
                    <section id="4" name="Deployment"/>
                    <section id="4.1" name="Deployment Descriptor Elements"/>
                    <section id="4.2" name="Packaging and Deployment of JAX-WS Components"/>
                    <section id="4.3" name="Rules for Processing the Deployment Descriptor"/>
                    <section id="5" name="Annotations and Resource Injection"/>
                    <section id="5.1" name="@DeclaredRoles"/>
                    <section id="5.2" name="@EJB Annotation"/>
                    <section id="5.3" name="@EJBs Annotation"/>
                    <section id="5.4" name="@Resource Annotation"/>
                    <section id="5.5" name="@PersistenceContext Annotation"/>
                    <section id="5.6" name="@PersistenceContexts Annotation"/>
                    <section id="5.7" name="@PersistenceUnit Annotation"/>
                    <section id="5.8" name="@PersistenceUnits Annotation"/>
                    <section id="5.9" name="@PostConstruct Annotation"/>
                    <section id="5.10" name="@PreDestroy Annotation"/>
                    <section id="5.11" name="@Resources Annotation"/>
                    <section id="5.12" name="@RunAs Annotation"/>
                    <section id="5.13" name="@WebServiceRef Annotation"/>
                    <section id="5.14" name="@WebServiceRefs Annotation"/>
                    <section id="5.15" name="Managed Beans and JSR 299 requirements"/>
                </sections>
            </chapter>
            <chapter id="A" name="Change Log">
                <sections>
                    <section id="1" name="Session Clarification"/>
                    <section id="2" name="Filter All Dispatches"/>
                    <section id="3" name="Multiple Occurrences of Servlet Mappings"/>
                    <section id="4" name="Multiple Occurrences Filter Mappings"/>
                    <section id="5" name="Support Alternative HTTP Methods with Authorization Constraints"/>
                    <section id="6" name="Minimum J2SE Requirement"/>
                    <section id="7" name="Annotations and Resource Injection"/>
                    <section id="8" name="SRV.9.9 (Error Handling) Requirement Removed"/>
                    <section id="9" name="HttpServletRequest.isRequestedSessionIdValid() Clarification"/>
                    <section id="10" name="SRV.5.5 (Closure of Response Object) Clarification"/>
                    <section id="11" name="ServletRequest.setCharacterEncoding() Clarified"/>
                </sections>
            </chapter>
        </chapters>
    </location-names>
    <assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:1</id>
            <description>All servlet containers must support HTTP/1.0 and HTTP/1.1 protocols</description>
            <location chapter="1" section="2"/>
            <comment>Not going to put the container through the paces of full support, but we should be able to issue an OPTIONS request to the container using HTTP/1.1 and HTTP/1.0 should be accepted within a request.  NOTE:  All tests will probably now use HTTP/1.1.</comment>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:2</id>
            <description>J2SE 6.0 is the minimum version of the underlying Java platform with which containers must be built.</description>
            <location chapter="1" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:220</id>
            <description>In Servlet 2.5, metadata-complete only affected the scanning of annotations at deployment time. The notion of web-fragments did not exist in servlet 2.5. However in servlet 3.0 metadata-complete affects scanning of all annotations and web-fragments at deployment time. The version of the descriptor MUST not affect which annotations you scan for in a web application. An implementation of a particular version of the specification MUST scan for all annotations supported in that configuration, unless metadata-complete is specified.</description>
            <location chapter="1" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:221</id>
            <description>The HttpServlet abstract subclass adds additional methods beyond the basic
                Servlet interface that are automatically called by the service method in the
                HttpServlet class to aid in processing HTTP-based requests. These methods are:
            </description>
            <location chapter="2" section="1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:221.1</id>
                    <description>doGet for handling HTTP GET requests</description>
                    <location chapter="2" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:221.2</id>
                    <description>doPost for handling HTTP POST requests</description>
                    <location chapter="2" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:221.3</id>
                    <description>doPut for handling HTTP PUT requests</description>
                    <location chapter="2" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:221.4</id>
                    <description>doDelete for handling HTTP DELETE requests</description>
                    <location chapter="2" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:221.5</id>
                    <description>doHead for handling HTTP HEAD requests</description>
                    <location chapter="2" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:221.6</id>
                    <description>doOptions for handling HTTP OPTIONS requests</description>
                    <location chapter="2" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:221.7</id>
                    <description>doTrace for handling HTTP TRACE requests</description>
                    <location chapter="2" section="1.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:3</id>
            <description>A servlet hosted in a non-distributed environment, the servlet container must use only one instance per servlet declaration.</description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:222</id>
            <description>for a servlet implementing the SingleThreadModel interface, the servlet container may instantiate multiple instances to handle a heavy request load and serialize requests.</description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:4</id>
            <description>A servlet deployed as part of an application marked in the deployment descriptor as distributable, a container may have only one instance per servlet declaration per virtual machine (VM).</description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:223</id>
            <description>if the servlet in a distributable application implements the SingleThreadModel interface, the container may instantiate multiple instances of that servlet in each JVM of the container.</description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:5</id>
            <description>The life cycle of a servlet is expressed in the API by the 'init', 'service', and 'destroy' methods of the javax.servlet.Servlet interface that all servlets must implement directly, or indirectly through the GenericServlet or HttpServlet abstract classes.</description>
            <location chapter="2" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:6</id>
            <description>The servlet container is responsible for loading and instantiating servlets.  </description>
            <location chapter="2" section="3.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:6.1</id>
                    <description>When the servlet engine is started, needed servlet classes must be located by the servlet container using normal Java class loading facilities.</description>
                    <location chapter="2" section="3.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:7</id>
            <description>After the servlet object is instantiated, the container must initialize the servlet before it can handle requests from clients by calling the init method of the Server interface with a unique (per servlet declaration) object implementing the ServerConfig interface.</description>
            <location chapter="2" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:8</id>
            <description>The servlet container must not call the destroy method on a Servlet that threw an Exception during the initialization process.</description>
            <location chapter="2" section="3.2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:9</id>
            <description>A servlet throwing an UnavailableException that indicates a minimum time of unavailability, the container must wait for the period of time specified to pass before creating and initializing a new servlet instance.</description>
            <location chapter="2" section="3.2.1"/>
            <comment>Not testable as there is no information about expected response from container in such cases.</comment>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="deprecated" testable="true">
            <id>Servlet:SPEC:10</id>
            <description>For servlets not implementing the SingleThreadModel interface, if the service method (or methods such as doGet or doPost which are dispatched to the service method of the HttpServlet abstract class) has been defined with the synchronized keyword, the servlet container must serialize request through it.</description>
            <location chapter="2" section="3.3.1"/>
            <comment>Revisit -- wording seems incorrect.</comment>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:11</id>
            <description>If a permanent unavailability is indicated by the UnavailableException, the servlet container must remove the servlet from service, call its destroy method, and release the servlet instance.</description>
            <location chapter="2" section="3.3.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:11.1</id>
                    <description>Any requests refused by the container by the cause, must be returned with a SC_NOT_FOUND(404) response.</description>
                    <location chapter="2" section="3.3.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:224</id>
            <description>Any errors or exceptions that may occur during the execution of the dispatch methods MUST be caught and handled by the container as follows:</description>
            <location chapter="2" section="3.3.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:224.1</id>
                    <description> invoke the AsyncListener.onError(AsyncEvent) method for all instances of the AsyncListener registered with the ServletRequest for which the AsyncContext was created and make the caught Throwable available via the AsyncEvent.getThrowable().</description>
                    <location chapter="2" section="3.3.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:224.2</id>
                    <description> If none of the listeners called AsyncContext.complete or any of the AsyncContext.dispatch methods, then perform an error dispatch with a status code equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR and make the Throwable available as the value of the RequestDispatcher.ERROR_EXCEPTION request attribute. </description>
                    <location chapter="2" section="3.3.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:224.3</id>
                    <description> If no matching error page is found, or the error page does not call AsyncContext.complete() or any of the AsyncContext.dispatch methods, then the container MUST call AsyncContext.complete. </description>
                    <location chapter="2" section="3.3.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="deprecated" testable="true">
            <id>Servlet:SPEC:225</id>
            <description> If request.startAsync is called then this method (public void complete()) MUST be called to complete the async processing and commit and close the response.</description>
            <location chapter="2" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:226</id>
            <description>In the event that an asynchronous operation times out, the container must run through the following steps:</description>
            <location chapter="2" section="3.3.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:226.1</id>
                    <description>Invoke the AsyncListener.onTimeout method on all the AsyncListener instances registered with the ServletRequest on which the asynchronous operation was initiated.</description>
                    <location chapter="2" section="3.3.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:226.2</id>
                    <description>If none of the listeners called AsyncContext.complete() or any of the AsyncContext.dispatch methods, perform an error dispatch with a status code equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR.  </description>
                    <location chapter="2" section="3.3.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:226.3</id>
                    <description>If no matching error page was found, or the error page did not call AsyncContext.complete() or any of the AsyncContext.dispatch methods, the container MUST call AsyncContext.complete(). </description>
                    <location chapter="2" section="3.3.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:12</id>
            <description>When the servlet container determines that a Servlet should be removed from service, it must call the destroy method of the Servlet interface to allow the servlet to release any resources it is using and save any persistent state.</description>
            <location chapter="2" section="3.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:12.1</id>
                    <description>Before the container calls the destroy method, it must allow any threads that are currently running in the service method of the servlet to complete execution, or exceed a server defined time limit.</description>
                    <location chapter="2" section="3.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:12.2</id>
                    <description>Once the destroy method is called on a servlet instance, the container must not route other requests to that instance of the Servlet.</description>
                    <location chapter="2" section="3.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:12.3</id>
                    <description>After the destroy method completes, the servlet container must release the servlet instance so that it is eligible for garbage collection.</description>
                    <location chapter="2" section="3.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:20</id>
            <description>If a request parameter has more than one value, and are provided via a query string and a post body, the aggregation of the parameter values will result in the query string values being ordered before the post parameters.</description>
            <location chapter="3" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:21</id>
            <description>Path parameters that are a part of a GET request (as defined by HTTP 1.1) are not exposed by any of the getParameter methods of the ServletRequest interface.</description>
            <location chapter="3" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:22</id>
            <description>The following conditions must be met before post form data will be populated to the parameter set:</description>
            <location chapter="3" section="1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:22.1</id>
                    <description>The request is an HTTP or HTTPS request</description>
                    <location chapter="3" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:22.2</id>
                    <description>The HTTP method is POST</description>
                    <location chapter="3" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:22.3</id>
                    <description>The content type is application/x-www-form-urlencoded</description>
                    <location chapter="3" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:22.4</id>
                    <description>The servlet has made an initial call to any of the getParameter family of methods on the request object.</description>
                    <location chapter="3" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:22.5</id>
                    <description>If the conditions are not met and the post form data is not included in the parameter set, the post data must still be available to the servlet via the request object?s input stream. If the conditions are met, post form data will no longer be available for reading directly from the request object?s input stream. </description>
                    <location chapter="3" section="1.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:227</id>
            <description>If a request is of type multipart/form-data and if the servlet handling the request is annotated using the @MultipartConfig as defined in Section8.1.5, ?@MultipartConfig? on page8-64, the HttpServletRequest can make available the various parts of the multipart request via the following methods Each part provides access to the headers, content type related with it and also the content via the getInputStream method. </description>
            <location chapter="3" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:227.1</id>
                    <description>public Collection<Part> getParts()</description>
                    <location chapter="3" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:227.2</id>
                    <description>public Part getPart(String name)</description>
                    <location chapter="3" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:227.3</id>
                    <description> For parts with form-data as the Content-Disposition, but without a filename, the string value of the part will also be available via the getParameter / getParameterValues methods on HttpServletRequest, using the name of the part. </description>
                    <location chapter="3" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:228</id>
            <description>Attributes may be set by the container to express information </description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:229</id>
            <description>Only one attribute value may be associated with an attribute name. </description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:230</id>
            <description>here can be multiple headers with the same name, </description>
            <location chapter="3" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:23</id>
            <description>If the servlet used to process the request was matched with the '/*' pattern, getServletPath will return an empty string.</description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:24</id>
            <description>The path returned by getServletPath must begin with a slash '/'.</description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:25</id>
            <description>The path returned by getPathInfo must begin with a slash '/'</description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:26</id>
            <description>If a request has been transmitted over a secure protocol, such as HTTPS, the container must expose the following attributes to the servlet programmer:</description>
            <location chapter="3" section="8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:26.1</id>
                    <description>the javax.servlet.request.cipher_suite attribute is associated with a string value denoting the cipher suite used for the connection.</description>
                    <location chapter="3" section="8"/>
                    <comment>Not testable as SSL support is not required by the Servlet spec except when running in Java EE.</comment>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:26.2</id>
                    <description>The javax.servlet.request.key_size attribute will be associated with an Integer value denotied the encryption key size.</description>
                    <location chapter="3" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:26.3</id>
                    <description>The javax.servlet.request.X509Certificate request attribute will be associated with an array of java.security.cert.X509Certificates if the request was associated with an SSL certificate.</description>
                    <location chapter="3" section="8"/>
                    <sub-assertions>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:26.3.1</id>
                            <description>The order of the array associated with the javax.servlet.request.X509Certificate request attribute will be in ascending order of trust, i.e. the first certificate in the chain is the one set by the client, the next is the one used to authenticate first, and so on.</description>
                            <location chapter="3" section="8"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:26.4</id>
                    <description>Attribute SSL session id with String type name javax.servlet.request.ssl_session_id</description>
                    <location chapter="3" section="8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:231</id>
            <description>the Accept-Language header must be interpreted to determine the preferred language of the client.</description>
            <location chapter="3" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:232</id>
            <description>If no preferred locale is specified by the client, the locale returned by the getLocale method must be the default locale for the servlet container and the getLocales method must contain an enumeration of a single Locale element of the default locale.</description>
            <location chapter="3" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:27</id>
            <description>The default encoding of a request the container uses to create the request reader and parse POST data must be "ISO-8859-1", if none has been specified by the client request.</description>
            <location chapter="3" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:28</id>
            <description>Calling the setCharacterEncoding(String enc) method after the request data has been read will not affect the encoding of the data.</description>
            <location chapter="3" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:29</id>
            <description>Each request object is valid only within the scope of a servlet's service method, or within the scope of a filter's doFilter method, unless the asynchronous processing is enabled for the component and the startAsync method is invoked on the request object.</description>
            <location chapter="3" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:233</id>
            <description>In the case where asynchronous processing occurs, the request object remains valid until complete is invoked on the AsyncContext. </description>
            <location chapter="3" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:13</id>
            <description>There is one instance object of the ServletContext interface associated with each web application deployed into a container.</description>
            <location chapter="4" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:14</id>
            <description>In cases where the container is distributed over many virtual machines, a Web application will have an instance of the ServletContext for each JVM.</description>
            <location chapter="4" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:15</id>
            <description>Servlets in a container that were not deployed as part of a Web application are implicitly part of a ?default? Web application and have a default ServletContext. </description>
            <location chapter="4" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:15.1</id>
                    <description>In a distributed container, the default ServletContext is non-distributable and must only exist in one VM.</description>
                    <location chapter="4" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:234</id>
            <description>These methods can only be called during the initialization of the application either from the contexInitialized method of a ServletContextListener implementation or from the onStartup method of a ServletContainerInitializer implementation.</description>
            <location chapter="4" section="4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.1</id>
                    <description>addServlet(String servletName, String className)</description>
                    <location chapter="4" section="4.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.2</id>
                    <description>addServlet(String servletName, Servlet servlet)</description>
                    <location chapter="4" section="4.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.3</id>
                    <description>addServlet(String servletName, Class <? extends Servlet> servletClass)</description>
                    <location chapter="4" section="4.1.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.4</id>
                    <description><T extends Servlet> T createServlet(Class<T> clazz)</description>
                    <location chapter="4" section="4.1.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.5</id>
                    <description>ServletRegistration getServletRegistration(String servletName)</description>
                    <location chapter="4" section="4.1.5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.6</id>
                    <description>Map<String, <? extends ServletRegistration> getServletRegistrations()</description>
                    <location chapter="4" section="4.1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.7</id>
                    <description>addFilter(String filterName, String className)</description>
                    <location chapter="4" section="4.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.8</id>
                    <description>addFilter(String filterName, Filter filter)</description>
                    <location chapter="4" section="4.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.9</id>
                    <description>addFilter(String filterName, Class <? extends Filter> filterClass)</description>
                    <location chapter="4" section="4.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.10</id>
                    <description><T extends Filter> T createFilter(Class<T> clazz)</description>
                    <location chapter="4" section="4.2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.11</id>
                    <description>FilterRegistration getFilterRegistration(String filterName)</description>
                    <location chapter="4" section="4.2.5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.12</id>
                    <description>Map<String, <? extends FilterRegistration> getServletRegistrations()</description>
                    <location chapter="4" section="4.2.6"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.13</id>
                    <description>void addListener(String className)</description>
                    <location chapter="4" section="4.3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.14</id>
                    <description><T extends EventListener> void addListener(T t)</description>
                    <location chapter="4" section="4.3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.15</id>
                    <description>void addListener(Class <? extends EventListener> listenerClass)</description>
                    <location chapter="4" section="4.3.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:234.16</id>
                    <description><T extends EventListener> void createListener(Class<T> clazz)</description>
                    <location chapter="4" section="4.3.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:235</id>
            <description>void addListener(String className) Add the listener with the given class name to the ServletContext. The class with the given name will be loaded using the classloader associated with the application represented by the ServletContext, and MUST implement one or more of the following interfaces:</description>
            <location chapter="4" section="4.3.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:235.1</id>
                    <description>javax.servlet.ServletContextAttributeListener</description>
                    <location chapter="4" section="4.3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:235.2</id>
                    <description>javax.servlet.ServletRequestListener</description>
                    <location chapter="4" section="4.3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:235.3</id>
                    <description>javax.servlet.ServletRequestAttributeListener</description>
                    <location chapter="4" section="4.3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:235.4</id>
                    <description>javax.servlet.http.HttpSessionListener</description>
                    <location chapter="4" section="4.3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:235.5</id>
                    <description>javax.servlet.http.HttpSessionAttributeListener</description>
                    <location chapter="4" section="4.3.1"/>
                </assertion>
             </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:236</id>
            <description>If the ServletContext was passed to the ServletContainerInitializer?s onStartup method,
                then the class with the given name MAY also implement javax.servlet.ServletContextListener
                in addition to the interfaces listed above. As part of this method call,
                the container MUST load the class with the specified class name to ensure that
                it implements one of the required interfaces. If the class with the given name implements a listener interface
                whose invocation order corresponds to the declaration order, that is,
                if it implements javax.servlet.ServletRequestListener or javax.servlet.http.HttpSessionListener,
            then the new listener will be added to the end of the ordered list of listeners of that interface.</description>
            <location chapter="4" section="4.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:237</id>
            <description><T extends EventListener> void addListener(T t) Add the given listener to the ServletContext. The given listener MUST be an instance of one or more of the following interfaces: </description>
            <location chapter="4" section="4.3.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:237.1</id>
                    <description>javax.servlet.ServletContextAttributeListener</description>
                    <location chapter="4" section="4.3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:237.2</id>
                    <description>javax.servlet.ServletRequestListener</description>
                    <location chapter="4" section="4.3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:237.3</id>
                    <description>javax.servlet.ServletRequestAttributeListener</description>
                    <location chapter="4" section="4.3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:237.4</id>
                    <description>javax.servlet.http.HttpSessionListener</description>
                    <location chapter="4" section="4.3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:237.5</id>
                    <description>javax.servlet.http.HttpSessionAttributeListener</description>
                    <location chapter="4" section="4.3.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:238</id>
            <description>If the ServletContext was passed to the ServletContainerInitializer?s onStartup method,
                then the given listener MAY also ben an instance of javax.servlet.ServletContextListener
                in addition to the interfaces listed above. If the given listener is an instance of a listener interface
                whose invocation order corresponds to the declaration order, that is, if it implements
                javax.servlet.ServletRequestListener or javax.servlet.http.HttpSessionListener, then the new listener will be
            added to the end of the ordered list of listeners of that interface. </description>
            <location chapter="4" section="4.3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:239</id>
            <description>void addListener(Class <? extends EventListener> listenerClass) Add the listener of the given class type to the ServletContext. The given listener class MUST implement one or more of the following interfaces: </description>
            <location chapter="4" section="4.3.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:239.1</id>
                    <description>javax.servlet.ServletContextAttributeListener</description>
                    <location chapter="4" section="4.3.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:239.2</id>
                    <description>javax.servlet.ServletRequestListener</description>
                    <location chapter="4" section="4.3.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:239.3</id>
                    <description>javax.servlet.ServletRequestAttributeListener</description>
                    <location chapter="4" section="4.3.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:239.4</id>
                    <description>javax.servlet.http.HttpSessionListener</description>
                    <location chapter="4" section="4.3.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:239.5</id>
                    <description>javax.servlet.http.HttpSessionAttributeListener</description>
                    <location chapter="4" section="4.3.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:240</id>
            <description>If the ServletContext was passed to the ServletContainerInitializer?s onStartup method,
                then the given listener class MAY also implement javax.servlet.ServletContextListener
                in addition to the interfaces listed above. If the given listener class implements a listener interface
                whose invocation order corresponds to the declaration order, that is, if it implements
                javax.servlet.ServletRequestListener or javax.servlet.http.HttpSessionListener, then the new listener will be
            added to the end of the ordered list of listeners of that interface. </description>
            <location chapter="4" section="4.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:241</id>
            <description><T extends EventListener> void createListener(Class<T> clazz) This method instantiates the given EventListener class. The specified EventListener class MUST implement at least one of the following interfaces:  </description>
            <location chapter="4" section="4.3.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:241.1</id>
                    <description>javax.servlet.ServletContextAttributeListener</description>
                    <location chapter="4" section="4.3.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:241.2</id>
                    <description>javax.servlet.ServletRequestListener</description>
                    <location chapter="4" section="4.3.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:241.3</id>
                    <description>javax.servlet.ServletRequestAttributeListener</description>
                    <location chapter="4" section="4.3.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:241.4</id>
                    <description>javax.servlet.http.HttpSessionListener</description>
                    <location chapter="4" section="4.3.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:241.5</id>
                    <description>javax.servlet.http.HttpSessionAttributeListener</description>
                    <location chapter="4" section="4.3.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:242</id>
            <description>This method MUST support all annotations applicable to the above listener interfaces
                as defined by this specification. The returned EventListener instance may be further customized
                before it is registered with the ServletContext via a call to addListener(T t).
            The given EventListener class MUST define a zero argument constructor, which is used to instantiate it. </description>
            <location chapter="4" section="4.3.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:243</id>
            <description>When using the programmatic API to add a servlet or create a servlet, apart from the addServlet
                that takes an instance, the following annotations must be introspected in the class in question and
                the metadata defined in it MUST be used unless it is overridden by calls to the API
                in the ServletRegistration.Dynamic / ServletRegistration.
                @ServletSecurity, @RunAs, @DeclareRoles, @MultipartConfig.
            </description>
            <location chapter="4" section="4.3.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:244</id>
            <description>For Filters and Listeners no annotations need to be introspected.
                Resource injection on all components (Servlets, Filters and Listeners) added programmatically
                or created programmatically, other than the ones added via the methods that takes an instance,
                will only be supported when the component is a Managed Bean. For details about
            what is a Managed Bean please refer to the Managed Bean specification defined as part of Java EE 6 and JSR 299. </description>
            <location chapter="4" section="4.3.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:16</id>
            <description>Any attribute bound into a context (using the appropriate methods of the ServletContext interface) is available to any other servlet that is part of the same web application.</description>
            <location chapter="4" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:245</id>
            <description>Context attributes are local to the JVM in which they were created.
                This prevents ServletContext attributes from being a shared memory store in a distributed container.
                When information needs to be shared between servlets running in a distributed environment,
            the information should be placed into a session.</description>
            <location chapter="4" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:246</id>
            <description>The ServletContext interface provides direct access only to
                the hierarchy of static content documents that are part of the Web application,
            including HTML, GIF, and JPEG files, via the following methods of the ServletContext interface: </description>
            <location chapter="4" section="6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:246.1</id>
                    <description>getResource</description>
                    <location chapter="4" section="6"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:246.2</id>
                    <description>getResourceAsStream</description>
                    <location chapter="4" section="6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:247</id>
            <description>The getResource and getResourceAsStream methods take a String with a leading ?/? as an argument
                that gives the path of the resource relative to the root of the context or relative
            to the META-INF/resources directory of a JAR file inside the web application?s WEB-INF/lib directory. </description>
            <location chapter="4" section="6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:247.1</id>
                    <description>These methods will first search the root of the web application context for the requested resource</description>
                    <location chapter="4" section="6"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:247.2</id>
                    <description>before looking at any of the JAR files in the WEB-INF/lib directory.
                    The order in which the JAR files in the WEB-INF/lib directory are scanned is undefined.</description>
                    <location chapter="4" section="6"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:247.3</id>
                    <description>This hierarchy of documents may exist in the server?s file system,
                    in a Web application archive file, on a remote server, or at some other location. </description>
                    <location chapter="4" section="6"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:247.4</id>
                    <description>These methods are not used to obtain dynamic content. </description>
                    <location chapter="4" section="6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:17</id>
            <description>In the case where logical hosts (multiple logical hosts sharing one IP address), each logical host must have its own servlet context or set of servlet contexts.</description>
            <location chapter="4" section="7"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:18</id>
            <description>Although a Container Provider implementation of a class reloading scheme for ease of development is not required, any such implementation must ensure that all servlets, and classes that they may use, are loaded in the scope of a single class loader.</description>
            <location chapter="4" section="8"/>
            <sub-assertions>
                <assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:18.1</id>
                    <description>The full semantics of notification to session binding listeners should be supported by containers for use in the monitoring of session termination upon class reloading.</description>
                    <location chapter="4" section="8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:19</id>
            <description>Servlet containers must provide a private temporary directory for each servlet context.</description>
            <location chapter="4" section="8.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:19.1</id>
                    <description>The container must make it available via the javax.servlet.context.tempdir context attribute. The objects associated with the attribute must be of type java.io.File.</description>
                    <location chapter="4" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:19.2</id>
                    <description>Servlet containers are required to ensure that the contents of the temporary directory of one servlet context is not
                    visible to the servlet contexts of other Web applications running on the servlet container.</description>
                    <location chapter="4" section="8.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:30</id>
            <description>A servlet container is allowed, but not required, to buffer output going to the client for efficiency purposes.</description>
            <location chapter="5" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:31</id>
            <description>If a response has been committed, and the reset or resetBuffer methods have been called, an IllegalStateException must be thrown, however, the response and its associated buffer will remain unchanged.</description>
            <location chapter="5" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:32</id>
            <description>When a buffer is used, the container must immediately flush the contents of a filled buffer to the client.  If this is the first data sent to the client, the response is now considered committed.</description>
            <location chapter="5" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:33</id>
            <description>Any headers that are to be present in the response, must be set before the response is committed.  Any headers set after the response is committed will be ignored by the servlet container.</description>
            <location chapter="5" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:34</id>
            <description>Servlet containers must not set a default content type (Content-Type) header when the servlet programmer does not set the type.</description>
            <location chapter="5" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:35</id>
            <description>If a partial URL is given and, for whatever reason, cannot be converted into a valid URL, then this method must throw an IllegalArgumentException.</description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:36</id>
            <description>sendError has the side effect of committing the response.  Any headers added after calling this method will be ignored by the container.</description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:37</id>
            <description>sendRedirect has the side effect of commiting the response.  Any headers added after calling this method will be ignored by the container.</description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:38</id>
            <description>If data has been written to the response buffer, but not returned to the client (i.e., the response is not committed), the data in the response buffer must be cleared and replaced with the data set by sendRedirect.</description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:39</id>
            <description>If data has been written to the response buffer, but not returned to the client (i.e., the response is not committed), the data in the response buffer must be cleared and replaced with the data set by sendError.</description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:40</id>
            <description>If data is written to the response after sendRedirect has been called, it will be ignored by the container.</description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:41</id>
            <description>If data is written to the response after sendError has been called, it will be ignored by the container.</description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:42</id>
            <description>The following events indicate that the servlet has satisfied the request and that the any remaining content in the response buffer is flushed to the client and the response object is to be closed:</description>
            <location chapter="5" section="5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:42.1</id>
                    <description>The termination of the service method.</description>
                    <location chapter="5" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:42.2</id>
                    <description>The amount of content specified in the setContentLength method of the response
                    has been greater than zero and has been written to the response.</description>
                    <location chapter="5" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:42.3</id>
                    <description>The sendError method is called.</description>
                    <location chapter="5" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:42.4</id>
                    <description>The sendRedirectMethod is called.</description>
                    <location chapter="5" section="5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:43</id>
            <description>Each response object is valid only within the scope of a servlet's service method, or within the scope of a filter's doFilter method.</description>
            <location chapter="5" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:44</id>
            <description>After deployment of a web application, and before a request causes the container to access a web resource the container must locate the list of filters that must be applied to a particular resource.</description>
            <location chapter="6" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:45</id>
            <description>when the developer passes a request or response object which extends HttpServletRequestWrappertion>The container must ensure that is has instantiated a filter of the appropriate class for each filter in the list, and called it's init(FilterConfig config) method.</description>
            <location chapter="6" section="2.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:46</id>
            <description>If the exception thrown by a Filter is of type UnavailableException, the container may examine the isPermanent attribute of the exception and may choose to retry the filter at some later time.</description>
            <location chapter="6" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:47</id>
            <description>Only onc instance per filter declaration in the deployment descriptor is instantiated per Java virtual machine of the container.</description>
            <location chapter="6" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:48</id>
            <description>When the container receives an incoming request it takes the first filter instance in the list and calls its doFilter method, passing in the ServletRequest and ServletResponse, and a reference to the FilterChain object it will use.</description>
            <location chapter="6" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:49</id>
            <description>Before a filter instance can be removed from service by the container, the container must first call the destroy method on the filter to enable the filter to release any resources and perform other cleanup operations.</description>
            <location chapter="6" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:50</id>
            <description>When a filter invokes the doFilter method on the container's filter chain implementation, the container must ensure that the request and response object that is passes to the next entity in the filter chain, or the target web resource if the filter was the last in the chain, is the same object that was passed into the doFilter method by the calling filter.</description>
            <location chapter="6" section="2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:51</id>
            <description>When passes a request or response object which extends HttpServletRequestWrapper or HttpServletResponseWrapper into the request dispatcher, the request and response objects passed into the servlet invoked must be the same objects as were passed in.
            When passes a request or response object which does not extend HttpServletRequestWrapper or HttpServletResponseWrapper but does implement HttpServletRequest or HttpServletResponse into the request dispatcher, the request and response objects may be wrapped in order to satisfy the include or forward specification.</description>
            <location chapter="6" section="2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:52</id>
            <description>The order the container uses in building the chain of filters applied to applied for a particular request URI is:</description>
            <location chapter="6" section="2.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:52.1</id>
                    <description>The url-pattern matching filter-mappings in the same order that these elements appear in the deployment descriptor.</description>
                    <location chapter="6" section="2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:52.2</id>
                    <description>The servlet-name matching filter-mappings in the same order that these elements appear in the deployment descriptor.</description>
                    <location chapter="6" section="2.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:53</id>
            <description>Containers may cache filter chaing so that they do not need to compute them on a per request basis.</description>
            <location chapter="6" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:54</id>
            <description>If a &lt;dispatcher&gt; element for a particular &lt;filter-mapping&gt; is REQUEST, the filter will be applied to incoming client requests only.</description>
            <location chapter="6" section="2.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:55</id>
            <description>If a &lt;distpatcher&gt; element for a particular &lt;filter-mapping&gt; is FORWARD, then the filter will be applied to a request being processed by a RequestDispatcher representing the web component matching the &lt;url-pattern&gt; or &lt;servlet-name&gt; using a forward() call.</description>
            <location chapter="6" section="2.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:56</id>
            <description>If a &lt;distpatcher&gt; element for a particular &lt;filter-mapping&gt; is INCLUDE, then the filter will be applied to a request being processed by a RequestDispatcher representing the web component matching the &lt;url-pattern&gt; or &lt;servlet-name&gt; using a include() call.</description>
            <location chapter="6" section="2.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:57</id>
            <description>If a &lt;dispatcher&gt; element for a particular &lt;filter-mapping&gt; is ERROR then the filter will only be applied when being processed by the error page mechanism.</description>
            <location chapter="6" section="2.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:58</id>
            <description>If the &lt;dispatcher&gt; element is not present in a &lt;filter-mapping&gt; then the filters will only be applied against client requests.</description>
            <location chapter="6" section="2.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:59</id>
            <description>The container must be able to support multiple &lt;dispatcher&gt; elements for a particular &lt;filter-mapping&gt;</description>
            <location chapter="6" section="2.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:202</id>
            <description>Session tracking through HTTP cookies is the most used session tracking mechanism and is required to be supported by all servlet containers. The container sends a cookie to the client. The client will then return the cookie on each subsequent request to the server, unambiguously associating the request with a session. The name of the session tracking cookie must be JSESSIONID.</description>
            <location chapter="7" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:60</id>
            <description>When a client will not accept a cookie, URL rewriting may be used by the server as the basis for session tracking. URL rewriting involves adding data, a session ID, to the URL path that is interpreted by the container to associate the request with a session. </description>
            <location chapter="7" section="1.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:60.2</id>
                    <description> The session ID must be encoded as a path parameter in the URL string.</description>
                    <location chapter="7" section="1.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:60.1</id>
                    <description>The name of the path parameter must be 'jsessionid'.</description>
                    <location chapter="7" section="1.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:61</id>
            <description>Web container must be able to support HTTP session tracking while servicing HTTP request from clients that do no support the use of cookies.</description>
            <location chapter="7" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:62</id>
            <description>A session is considered 'new' if either of the following are true:</description>
            <location chapter="7" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:62.1</id>
                    <description>The client does not yet know about the session.</description>
                    <location chapter="7" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:62.2</id>
                    <description>The client chooses not to join a session.</description>
                    <location chapter="7" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:63</id>
            <description>HttpSession objects must be scoped at the application (or servlet context) level.  </description>
            <location chapter="7" section="3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:63.1</id>
                    <description>The underlying mechanism, such as the cookies used to establish the session, can be the same for different context, but the object references, including the attributes in that object, must never be shared between context by the container.</description>
                    <location chapter="7" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:63.2</id>
                    <description>Additionally, sessions of a context must be resumable by requests into that context regardless of whether their associated context was being accessed directly or as the target of a request dispatch at the time the sessions were created.</description>
                    <location chapter="7" section="3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:64</id>
            <description>The valueBound method must be called before the object is made available vai the getAttribute method of the HttpSession interface.</description>
            <location chapter="7" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:65</id>
            <description>The valueUnbound method must be called after the object is no longer available via the getAttribute method of the HttpSession interface.</description>
            <location chapter="7" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:66</id>
            <description>The default timeout period for sessions is defined by the servlet container and can be obtained via the getMaxInactiveInterval method of the HttpSession interface.</description>
            <location chapter="7" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:67</id>
            <description>Invalidation will not take effect until all servlets using that session have exited the service method.</description>
            <location chapter="7" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:203</id>
            <description>The getLastAccessedTime method of the HttpSession interface allows a servlet to determine the last time the session was accessed before the current request. The session is considered to be accessed when a request that is part of the session is first handled by the servlet container.</description>
            <location chapter="7" section="6"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:68</id>
            <description>Within an application marked as distributable, all request that are part of a session must be handled by one virtual machine at a time.</description>
            <location chapter="7" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:69</id>
            <description>The container must be able to handle all objects placed into instances of the HttpSession class using the setAttribute or putValue methods appropriately, with the following restrictions:</description>
            <location chapter="7" section="7.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:69.1</id>
                    <description>The container must accept objects that implement the Serializable interface.</description>
                    <location chapter="7" section="7.2"/>
                </assertion>
                <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:69.2</id>
                    <description>The container may choose to support storage of other designated objects in the HttpSession, such as references to Enterprise JavaBean components and transactions.</description>
                    <location chapter="7" section="7.2"/>
                </assertion>
                <assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:69.3</id>
                    <description>Migration of sessions will be handled by container-specific facilities.</description>
                    <location chapter="7" section="7.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:70</id>
            <description>The distributed servlet container must throw an IllegalArgumentException for objects where the container cannot support the mechanism necessary for migration of the session storing them.</description>
            <location chapter="7" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:71</id>
            <description>The distributed servlet container must support the mechanism necessary for migrating objects that implement Serializable.</description>
            <location chapter="7" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:72</id>
            <description>Distributed servlet containers must support the mechanism necessary for migrating objects that implements Serializable.</description>
            <location chapter="7" section="7.2"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:73</id>
            <description>If distributed contains persist or migrate sessions to provide quality of service features, they are not restricted to using the native JVM Serialization mechanism for serializing HttpSessions and their attributes.</description>
            <location chapter="7" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:74</id>
            <description>Containers must notify any session attributes implementing the HttpSessionActivationListener during migration of a session.  They must notify listeners of passivation prior to serialization of a session, and of activation after deserialization of a session</description>
            <location chapter="7" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:75</id>
            <description>The Container provider must ensure that the dispatch of the request to a target servlet occurs in the same thread of the same VM as the original request.</description>
            <location chapter="9" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:192</id>
            <description>The include method of the RequestDispatcher interface may be called at any time. The target servlet of the include method has access to all aspects of the request object, but its use of the response object is more limited.</description>
            <location chapter="9" section="3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:192.1</id>
                    <description>It can only write information to the ServletOutputStream or Writer of the response object</description>
                    <location chapter="9" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:192.2</id>
                    <description>commit a response by writing content past the end of the response buffer</description>
                    <location chapter="9" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:192.3</id>
                    <description>commit a response by explicitly calling the flushBuffer method of the ServletResponse interface.</description>
                    <location chapter="9" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:192.4</id>
                    <description>It cannot set headers or call any method that affects the headers of the response, with the exception of the HttpServletRequest. getSession() and HttpServletRequest.getSession(boolean) methods. Any attempt to set the headers must be ignored, and any call to HttpServletRequest. getSession() or HttpServletRequest.getSession( boolean) that would require adding a Cookie response header must throw an IllegalStateException if the response has been committed.</description>
                    <location chapter="9" section="3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:76</id>
            <description>Except for servlets obtained by using the getNamedDispatcher method, a servlet being used from within an include has access to the path by which it was invoked.  The following request attributes are set:</description>
            <location chapter="9" section="3.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:76.1</id>
                    <description>'javax.servlet.include.request_uri' which is the URI by which it was invoked.</description>
                    <location chapter="9" section="3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:76.2</id>
                    <description>'javax.servlet.include.context_path' which is the context path portion of the request URI by which it was invoked.</description>
                    <location chapter="9" section="3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:76.3</id>
                    <description>'javax.servlet.include.servlet_path' the servlet-path portion of the request URI by which it was invoked.</description>
                    <location chapter="9" section="3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:76.4</id>
                    <description>'javax.servlet.include.path_info' the path-info portion of the request URI by which it was invoked.</description>
                    <location chapter="9" section="3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:76.5</id>
                    <description>'javax.servlet.include.query_string' the query string portion of the request URI by which it was invoked.</description>
                    <location chapter="9" section="3.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:77</id>
            <description>If output data exists in the response buffer that has not been committed, the content must be cleared before the target's service method is called.</description>
            <location chapter="9" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:78</id>
            <description>The path elements of the request object exposed to the target servlet must reflect the path used to obtain the RequestDispatcher.</description>
            <location chapter="9" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:79</id>
            <description>If the RequestDispatcher was obtained through getNamedDispatcher the path elements of the request object must reflect those of the original request.</description>
            <location chapter="9" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:80</id>
            <description>Before the forward method of the RequestDispatcher interface returns, the response content must be sent and committed, and closed by the servlet container.</description>
            <location chapter="9" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="deprecated" testable="true">
            <id>Servlet:SPEC:81</id>
            <description>The request dispatching mechanism is responsible for aggregating query string parameters when forwarding or including requests.</description>
            <location chapter="9" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:180</id>
            <description>Except for servlets obtained by using the getNamedDispatcher method, a servlet that has been invoked by another servlet using the forward method of RequestDispatcher has access to the path of the original request. The values of these attributes must be equal to the return values of the HttpServletRequest methods getRequestURI, getContextPath, getServletPath, getPathInfo, getQueryString respectively, invoked on the request object passed to the first servlet object in the call chain that received the request from the client. These attributes are accessible from the forwarded servlet via the getAttribute method on the request object. Note that these attributes must always reflect the information in the original request even under the situation that multiple forwards and subsequent includes are called. If the forwarded servlet was obtained by using the getNamedDispatcher method, these attributes must not be set.</description>
            <location chapter="9" section="4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:180.1</id>
                    <description>javax.servlet.forward.request_uri</description>
                    <location chapter="9" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:180.2</id>
                    <description>javax.servlet.forward.context_path</description>
                    <location chapter="9" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:180.3</id>
                    <description>javax.servlet.forward.servlet_path</description>
                    <location chapter="9" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:180.4</id>
                    <description>javax.servlet.forward.path_info</description>
                    <location chapter="9" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:180.5</id>
                    <description>javax.servlet.forward.query_string</description>
                    <location chapter="9" section="4.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:181</id>
            <description>If the forwarded servlet was obtained by using the getNamedDispatcher method, these attributes must not be set.</description>
            <location chapter="9" section="4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:181.1</id>
                    <description>javax.servlet.forward.request_uri</description>
                    <location chapter="9" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:181.2</id>
                    <description>javax.servlet.forward.context_path</description>
                    <location chapter="9" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:181.3</id>
                    <description>javax.servlet.forward.servlet_path</description>
                    <location chapter="9" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:181.4</id>
                    <description>javax.servlet.forward.path_info</description>
                    <location chapter="9" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:181.5</id>
                    <description>javax.servlet.forward.query_string</description>
                    <location chapter="9" section="4.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:82</id>
            <description>If the servlet that is the target of a request dispatcher throws a runtime exception or a checked exception of type ServletException or IOException, it may be propagated to the calling servlet.</description>
            <location chapter="9" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:83</id>
            <description>All other exceptions (not a runtime, ServletException, or IOException) should be wrapped as ServletExceptions with the root cause the original exception before propagation.</description>
            <location chapter="9" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:84</id>
            <description>An instance of a web application, by default, must run on one VM at any one time.</description>
            <location chapter="10" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:85</id>
            <description>An application marked as distributable must obey a more restrictive set of rules than is required of a normal web application (the rules are set through out this list.)</description>
            <location chapter="10" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:86</id>
            <description>The servlet container must enforce a one to one correspondence between a web application and a ServletContext.  A ServletContext object provides a servlet with its view of the application.</description>
            <location chapter="10" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:87</id>
            <description>Since the context path of an application determines the URL namespace of the context of the web application, web containers must reject web application defining a context path could cause potential conflicts in this URL namespace.</description>
            <location chapter="10" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:88</id>
            <description>Since request are matched to resources case sensitively, this determination of potential context path namespace conflicts must be performed case sensitively as well.</description>
            <location chapter="10" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:89</id>
            <description>The WEB-INF node (or directory) of a web application is not part of the public document tree of the application.  Any requests to access the resources in /WEB-INF directory must be returned with a SC_NOT_FOUND(404) response.</description>
            <location chapter="10" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:90</id>
            <description>The contents of /WEB-INF are visible to Servlets through the use of ServletContext.getResource or ServletContext.getSourceAsStream.</description>
            <location chapter="10" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:91</id>
            <description>The web applcation classloader must load classes from the WEB-INF/ classes directory first, and then from the library JARs in the WEB-INF directory.</description>
            <location chapter="10" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:92</id>
            <description>When web applications are packaged in a WAR file (Web ARchive file), a META-INF directory will be present which contains information useful to Java Archive tools.</description>
            <location chapter="10" section="6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:92.1</id>
                    <description>Any requests to the META-INF directory of a packaged web application will be returned with a SC_NOT_FOUND(404) response.</description>
                    <location chapter="10" section="6"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:92.2</id>
                    <description>The content of the META-INF directory of a packaged web application is accessible to servlets using the getResource and getResourceAsStream methods of the ServletContext.</description>
                    <location chapter="10" section="6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:93</id>
            <description>Java EE technology-compliant containers are required to provide a mechanism by which a deployer can learn what JAR files containing resources and code are available for the Web application.</description>
            <location chapter="10" section="7.1"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:97</id>
            <description>Containers should provide a convenient procedure for editing and configuring library files or extensions.</description>
            <location chapter="10" section="7.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:94</id>
            <description>During deployment of the Web application, the Web container must make the correct versions of the extensions available to the application following the rules defined by the Optional Package Versioning mechanism (http://java.sun.com/j2se/1.4/docs/guide/extensions/).</description>
            <location chapter="10" section="7.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:95</id>
            <description>Web containers must also be able to recognize declared dependencies expressed in the manifest entry of any of the library JARs under the WEB-INF/lib entry in a WAR.</description>
            <location chapter="10" section="7.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:96</id>
            <description>If a web container is not able to satisfy the dependencies declared via manifest files, it should reject the application with an informative error message.</description>
            <location chapter="10" section="7.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:98</id>
            <description>The classloader that a container uses to load a servlet in a WAR must allow the developer to load any resources contained in library JARs within the WAR following normal J2SE semantics using getResource.</description>
            <location chapter="10" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:99</id>
            <description>As described in the J2SE license agreement, servlet containers that are not part of a Java EE product should not allow the application to override J2SE platform classes, such as those in the java.* and javax.* namespaces, that J2SE does not allow to be modified.</description>
            <location chapter="10" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:99.1</id>
            <description>Also, servlet containers that are part of a Java EE product should not allow the application to override J2SE or Java EE platform classes, such as those in the java.* and javax.* namespaces, that either J2SE or Java EE do not allow to be modified.</description>
            <location chapter="10" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:99.2</id>
            <description>The class loader that a container uses to load a servlet in a WAR must allow the developer to load any resources contained in library JARs within the WAR following normal J2SE semantics using getResource.</description>
            <location chapter="10" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:99.3</id>
            <description>It is recommended also that the application class loader be implemented so that classes and resources packaged within the WAR are loaded in preference to classes and resources residing in container-wide library JARs.</description>
            <location chapter="10" section="7.2"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:100</id>
            <description>It is recommended that the loader not allow servlets in the WAR access to the web container's implementation classes.</description>
            <location chapter="10" section="7.2"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:101</id>
            <description>It is recommended also that the application classloader be implemented so that classes and resources packaged  within the WAR are loaded in preference to classes and resources residing in container-wide library JARs.</description>
            <location chapter="10" section="7.2"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:102</id>
            <description>A server should be able to replace an application with a new version without restarting the container.  When an application is replaced, the container should provide a robust method for preserving session data within that application.</description>
            <location chapter="10" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:103</id>
            <description>A web application must be able to specify that when errors occur other resources in the application are used to provide the content body of the error response.</description>
            <location chapter="10" section="9.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:104</id>
            <description>If the location of the error handler is a servlet or JSP page, then:</description>
            <location chapter="10" section="9.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:104.1</id>
                    <description>The original unwrapped request and response objects created by the container are passed to the servlet or JSP page.</description>
                    <location chapter="10" section="9.1"/>
                    <comment>Seems to contradict the section on request dispatching</comment>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="removed" testable="true">
                    <id>Servlet:SPEC:104.2</id>
                    <description>The response setStatus method is disabled and ignored if called.</description>
                    <location chapter="10" section="9.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:104.3</id>
                    <description>The request path and attributes are set as if a RequestDispatcher.forward to the error resource has been performed.</description>
                    <location chapter="10" section="9.1"/>
                    <sub-assertions>
                        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                            <id>Servlet:SPEC:104.3.1</id>
                            <description>The request attribute 'javax.servlet.error.status_code' of type 'java.lang.Integer' will be set containing the HTTP status code of the error condition.</description>
                            <location chapter="10" section="9.1"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                            <id>Servlet:SPEC:104.3.2</id>
                            <description>The request attribute 'javax.servlet.error.exception_type' of type 'java.lang.Class' will be set if the error page was invoked due to an uncaught exception.</description>
                            <location chapter="10" section="9.1"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                            <id>Servlet:SPEC:104.3.3</id>
                            <description>The request attribute 'javax.servlet.error.message' of type 'java.lang.String' will be set if the error page was invoked due to an uncaught exception.</description>
                            <location chapter="10" section="9.1"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                            <id>Servlet:SPEC:104.3.4</id>
                            <description>The 'javax.servlet.error.exception' attribute of type 'java.lang.Throwable' will be set if the error page was invoked due to an uncaught exception.</description>
                            <location chapter="10" section="9.1"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                            <id>Servlet:SPEC:104.3.5</id>
                            <description>The 'javax.servlet.error.request_uri' attribute of type 'java.lang.String' will contain the URI of the offending resource.</description>
                            <location chapter="10" section="9.1"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                            <id>Servlet:SPEC:104.3.6</id>
                            <description>The 'javax.servlet.error.servlet_name' attribute of type 'java.lang.String' will contain the logical name of the servlet in which the error occurred.</description>
                            <location chapter="10" section="9.1"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:105</id>
            <description>If the sendError method is called on the response, the container consults the list of error page declarations for the web application that use the status-code syntax and attempts a match.  If there is a match, the container returns the resource as indicated by the location entry.</description>
            <location chapter="10" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:106</id>
            <description>In the case where the container is matching error pages based on the exception-type element, a match results in the container returning the resource indicated in the location entry.  The closest match in the class hierarchy wins.</description>
            <location chapter="10" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:107</id>
            <description>If no error-page declaration containing an exception-type fits using the class-hierarchy match, and the exception throws is a ServletException or subclass thereof the container extraces the wrapped exception, as defined by the ServletException.getRootCause method and a second pass is made of the error page declarations, again attempting the match against the error page declearations,  but using the wrapped exception.</description>
            <location chapter="10" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:108</id>
            <description>Error-page declarations using the exception-type element in the deployment descriptor must be unique up to the class name of the exception type.</description>
            <location chapter="10" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:109</id>
            <description>Error page declarations using the status-code elements must be unique in the deployment descriptor up to the status-code.</description>
            <location chapter="10" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:110</id>
            <description>The error page mechanism does not intervene when errors occur when invoked using the RequestDispatcher or Filter.doFilter method.  In this way, a filter or servlet using the RequestDispatcher has the opportunity to handle errors generated.</description>
            <location chapter="10" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:111</id>
            <description>If a servlet generates an error that is not handled by the error page mechanism as described above, the container must ensure to send a response with status 500.</description>
            <location chapter="10" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:112</id>
            <description>The default servlet and container will use the sendError method to send 4xx and 5xx responses so that the error mechanism may be invoked.</description>
            <location chapter="10" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:113</id>
            <description>The default servlet and container will use the setStatus method to send 2xx and 3xx responses to bypass the error mechanism</description>
            <location chapter="10" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:114</id>
            <description>If a web container receives a valid partial request, the web container must examine the welcome files list, which is an ordered list of partial URLs, with no leading or trailing slash, and append the each welcome file to the partial URI in the order it was defined to find a match.  The web container must send the request to the first resource in the WAR that matches.</description>
            <location chapter="10" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:115</id>
            <description>If no welcome file match is found, the container may handle the request as it sees fit.</description>
            <location chapter="10" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:116</id>
            <description>Java EE compliant servlet containers are required to support the following elements of the web deployment descriptor for specifying information allowing a servlet to obtain references to resources and enterprise beans. The deployment elements that contain this information are:</description>
            <location chapter="10" section="11"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:116.1</id>
                    <description>env-entry</description>
                    <location chapter="10" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:116.2</id>
                    <description>ejb-ref</description>
                    <location chapter="10" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:116.3</id>
                    <description>ejb-local-ref</description>
                    <location chapter="10" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:116.4</id>
                    <description>resource-env-ref</description>
                    <location chapter="10" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:116.5</id>
                    <description>resource-ref</description>
                    <location chapter="10" section="11"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:117</id>
            <description>If the standalone container does not support these lookup facilities, the container should provide a warning upon deployment of an application that has dependencies on such resources.</description>
            <location chapter="10" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:118</id>
            <description>Servlet containers that are part of a Java EE technology compliant implementation must support lookups of such objects and calls made to those objects when performed on a thread managed by the servlet container.</description>
            <location chapter="10" section="11"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:119</id>
            <description>Such servlet containers should support this lookup behavior when performed on threads created by the developer, but are not required to do so.</description>
            <location chapter="10" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:120</id>
            <description>Each listener class specified in the deployment descriptor must have a public constructor taking no arguments.</description>
            <location chapter="11" section="3.1"/>
            <comment>Untestable as there is no way to really validate this.</comment>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="removed" testable="true">
            <id>Servlet:SPEC:121</id>
            <description>Listeners will be invoked in the order that they are defined in the deployment descriptor.</description>
            <location chapter="11" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:122</id>
            <description>The web container creates an instance of each listener class and registers it for event notifications prior to the processing of the first request by the application</description>
            <location chapter="11" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:123</id>
            <description>The web container registers the listener instances according to the interfaces they implement and the order in which they appear in the deployment descriptor.</description>
            <location chapter="11" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:124</id>
            <description>During web application execution listeners are invoked in the order of their registration.</description>
            <location chapter="11" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:125</id>
            <description>On application shutdown, listeners are notified in reverse order to their declarations with notifications to session listeners preceeding notifications to context listeners.  Session listeners must be notified of session invalidations prior to context listeners being notified of application shutdown.</description>
            <location chapter="11" section="3.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:126</id>
            <description>The container is required to complete instantiation of the listener classes in a web application prior to the start of execution of the first request into the application.</description>
            <location chapter="11" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:127</id>
            <description>The container must maintain a reference to each listener instance until the last request is serviced for the web application.</description>
            <location chapter="11" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:128</id>
            <description>The container must allow unhandled exceptions to be handled by the error page mechanism described in Section SRV.9.9, "Error Handling". If there is no error page specified for those exceptions, the container must ensure to send a response back with status 500. In this case no more listeners under that event are called.</description>
            <location chapter="11" section="6"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:129</id>
            <description>In cases where it is not possible to handle an Exception in application code (ex. an Exception occuring during initialization of a ContextListener), the container may response to all subsequent requests with an HTTP status code of 500 to indicate application error.</description>
            <location chapter="11" section="6"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:130</id>
            <description>In distributed web containers, HttpSession instances are scoped to the particular VM services session requests, and the ServletContext object is scoped to the web container's VM.</description>
            <location chapter="11" section="7"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:131</id>
            <description>Distributed containers are not required to propogate either servlet context events or HttpSession events to other VMs.</description>
            <location chapter="11" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:132</id>
            <description>Listener class instances are scoped to one per deployment descriptor declaration per Java virtual machine.</description>
            <location chapter="11" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:133</id>
            <description>Upon receipt of a client request, the web container determines the web application to which to forward it.  The web application selected must have the longest context path that matches the start of the request URL.  The matched port of the URL is the context path when mapping to servlets.</description>
            <location chapter="12" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:134</id>
            <description>The web container next must locate the servlet within the matched context to process the request using the following algorithm (NOTE: The path used for mapping to a servlet is the request URL from the request object minus the context path and the path parameters. The URL path mapping rules below are used in order. The first successful match is used with no further matches attempted):</description>
            <location chapter="12" section="1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:134.1</id>
                    <description>The container will try to find an exact match of the path of the request to the path of the servlet.  A successful match selects the servlet.</description>
                    <location chapter="12" section="1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:134.2</id>
                    <description>The container will recursively try to match the longest path-prefix: This is done by stepping down the path tree a directory at a time, using the '/' character as a path separator.  The longest match determines the servlet selected.</description>
                    <location chapter="12" section="1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:134.3</id>
                    <description>If the last segment in the URL path contains an extension (e.g. .jsp), the servlet container will try to match a servlet that handles requests for the extension.  An extension is defined as the part of the last segment after the last '.' character.</description>
                    <location chapter="12" section="1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:134.4</id>
                    <description>If neither the previous rules result in a servlet match, the container will attempt to serve content appropriate for the resource requested.  If a "default" servlet is defined for the applications, it will be used.</description>
                    <location chapter="12" section="1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:134.5</id>
                    <description>The container must use case-sensitive string comparisons for matching.</description>
                    <location chapter="12" section="1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:135</id>
            <description>If the container has an internal JSP container, the *.jsp extension is mapped to it, allowing JSP pages to be executed on demand.</description>
            <location chapter="12" section="2.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:136</id>
            <description>A servlet container is allowed to make other implicit mappings as long as explicit mappings take precedence.</description>
            <location chapter="12" section="2.1"/>
            <comment>Could be testable.  Define a mapping for .do or whatever and make sure that the expected content is always returned...might be considered a weak test.</comment>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:137</id>
            <description>Declarative security constraints are not applied when a servlet uses the RequestDispatcher to invoke a static resource or servlet using a forward or an include.</description>
            <location chapter="13" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:138</id>
            <description>The isUserInRole method uses the security-role-ref element when determining the return value of the call.   If no security-role-ref element matching a security-role element has been declared, the container must default to checking the role-name element against the list of security-role elements for the web applications.</description>
            <location chapter="13" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:139</id>
            <description>A servlet container enforces declarative or programmatic security for the principal associated with an incoming request based on the security attributes of the principal.  This may happen in either of the following ways:</description>
            <location chapter="13" section="5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:139.1</id>
                    <description>A deployer has mapped a security role to a user group in the operational environment.  The user group to which the calling principal belongs is retrieved from its security attributes.  The principal is in the security role only if the principals user group matches the user group to which the security role has been mapped by the deployer.</description>
                    <location chapter="13" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:139.2</id>
                    <description>A deployer has mapped a security role to a principal name in a security policy domain.  In this case, the principal name of the calling principal is retrieved from its security attributes.  The principal is in the security role only if the principal name is the same as a principal name to which the security role was mapped.</description>
                    <location chapter="13" section="5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:140</id>
            <description>HTTP Basic Authentication is required to be supported by servlet containers.</description>
            <location chapter="13" section="6.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:141</id>
            <description>HTTP Digest Authentication is not a required authentication mechanism for servlet containers.</description>
            <location chapter="13" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:142</id>
            <description>Form based authentication allows the customization of the login screen.</description>
            <location chapter="13" section="6.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:142.1</id>
                    <description>The login form used for form based authentication must contain fields for entering a username and a password.  These fields must be j_username and j_password, respectively.</description>
                    <location chapter="13" section="6.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:142.2</id>
                    <description>The login form used by the container can be specified within the deployment descriptor.</description>
                    <location chapter="13" section="6.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:142.3</id>
                    <description>An error page can be specified in the deployment descriptor which will be returned on failed form based authentication attempts.</description>
                    <location chapter="13" section="6.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
                    <id>Servlet:SPEC:142.4</id>
                    <description>The authentication process for form based login:</description>
                    <location chapter="13" section="6.3"/>
                    <sub-assertions>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:142.4.1</id>
                            <description>The login form associated with the security constraint is sent to the client and the URL path triggering the authentication is stored by the container.</description>
                            <location chapter="13" section="6.3"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:142.4.2</id>
                            <description>The container attempts to authenticate the user using the information from the form.</description>
                            <location chapter="13" section="6.3"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:142.4.3</id>
                            <description>If authentication fails, the error page is returned using either a forward or a redirect, and the status code of the response is set to 200.</description>
                            <location chapter="13" section="6.3"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:142.4.4</id>
                            <description>If authentication succeeds, the authenticated user's principal is check to see if it is in an authroized role for accessing the resource.</description>
                            <location chapter="13" section="3.1"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:142.4.5</id>
                            <description>If the user is authorized, the client is redirected to the resource using the stored URL path.</description>
                            <location chapter="13" section="3.1"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:142.5</id>
                    <description>The action of the login form must always be j_security_check.</description>
                    <location chapter="13" section="6.3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:142.6</id>
                    <description>If the form based login is invoked because of an HTTP request, the original request parameters must be preserved by the container for use if on successful authentication, it redirects the call to the requested resource.</description>
                    <location chapter="13" section="6.3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:142.7</id>
                    <description>If the user is authenticated using form login and has created an HTTP session, the timeout or invalidation of that session leads to the user being logged out in the sense that subsequent requests must cause the user to be re-authenticated.</description>
                    <location chapter="13" section="6.3.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:143</id>
            <description>Servlet containers that are not Java EE technology compliant are not required to support HTTPS protocol/authentication.</description>
            <location chapter="13" section="6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:144</id>
            <description>Servlet containers are required to track authentication information at the container level rather than at the web application level.</description>
            <location chapter="13" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:145</id>
            <description>A security identity, or principal, must always be provided for use in a call to an enterprise bean.</description>
            <location chapter="15" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:146</id>
            <description>The default mode in calls to enterprise beans from web applications is for the security identity of a web user to be propagated to the EJB container.</description>
            <location chapter="15" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:147</id>
            <description>If a container supports calls to EJB's containers are required to support access to web resources by clients that have not authenticated themselves to the container through the use of the run-as element of the deployment descriptor.  The container will use this identity when propagating the call from the web layer to the EJB layer.</description>
            <location chapter="15" section="3.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true" defined-by="platform" status="active" testable="false">
                    <id>Servlet:SPEC:147.1</id>
                    <description>The security role propagated through the run-as element must be a security role defined in the deployment descriptor of the web application.</description>
                    <location chapter="15" section="3.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:148</id>
            <description>Web containers running as part of a Java EE platform, the use of run-as elements must be supported both for calls to EJB components within the same Java EE application, and for calls to EJB components deployed in other Java EE applications.</description>
            <location chapter="15" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:149</id>
            <description>If a request is issued against a set of protected resources the user who made the request must be a member of at least one of the named roles to be permitted to perform the contrained requests.</description>
            <location chapter="13" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:150</id>
            <description>The special role name "*" is a shorthand for all role names defined in the deployment descriptor.</description>
            <location chapter="13" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:151</id>
            <description>An auth constraint that names no roles indicates that access ot the contrained resources must not be permitted under any circumstances.</description>
            <location chapter="13" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:152</id>
            <description>A user data constraint establishes a requirement that the constrained requests be received over a protected transport layer connection.</description>
            <location chapter="13" section="8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
                    <id>Servlet:SPEC:152.1</id>
                    <description>A transport guarantee of INTEGRAL is used to establish a requirement for content integrity.</description>
                    <location chapter="13" section="8"/>
                    <comment>Not testable.  Schema states that in most cases this would be SSL, but it's not a hard requirement.</comment>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
                    <id>Servlet:SPEC:152.2</id>
                    <description>A transport guarantee of CONFIDENTIAL is used to establish a requirement for confidentiality.</description>
                    <location chapter="13" section="8"/>
                    <comment>Not testable.  Schema states that in most cases this would be SSL, but it's not a hard requirement.</comment>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:152.3</id>
                    <description>A transport guarantee of NONE indicates that the container must accept the constrained requests when received on any connection including unprotected ones.</description>
                    <location chapter="13" section="8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:153</id>
            <description>If no auth-constraing applies to a request, the container must accept the request without requiring user authentication.</description>
            <location chapter="13" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:154</id>
            <description>When a url-pattern and http-method pair occurs in multiple security constraints, the applicable constraints (on the pattern and the method) are defined by combining the individual constraints.</description>
            <location chapter="13" section="8.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:154.1</id>
                    <description>A security constraint that does not contain an auth constraint shall combine with auth constraints that name or imply roles to allow unauthenticated access.</description>
                    <location chapter="13" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:154.2</id>
                    <description>The special case of an auth constraint that names no roles shall combine with any other constraints to override their affects and cause access to be precluded.</description>
                    <location chapter="13" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
                    <id>Servlet:SPEC:154.3</id>
                    <description>The combination of user-data constraints that apply to a common usr-pattern and http-method shall yield the union of connection types accepted by the individual constraints as acceptable connection types.</description>
                    <location chapter="13" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:154.4</id>
                    <description>A security constraint that does not contain a user-data constraint shall combine with other user-data constraints to cause the unprotected connection type to be an accepted connection type.</description>
                    <location chapter="13" section="8.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:155</id>
            <description>When a Servlet container receives a request, it shall use the url pattern matching algorithm to select the constraints, if any, defined that is the best match to the request URI</description>
            <location chapter="13" section="8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:156</id>
            <description>If no security contraint can be matched between the defined contraints and the request URI, the container will accept the request.</description>
            <location chapter="13" section="8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:157</id>
            <description>If a constraint match is found based on the request URI, the container shall determine if the HTTP method of the request is constrained, if it's not, then the constrained request will be accepted.</description>
            <location chapter="13" section="8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:158</id>
            <description>If the HTTP method is contrained, then the method used for the request must match what is acceptable for the constraint in order for the request to be accepted.</description>
            <location chapter="13" section="8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:159</id>
            <description>If the characteristics of the connection on which the request was received must satisfy at least one of the supported connection types defined by the constraints.  If this rule is not satisfied, the container shall reject the request and redirect it to the HTTPS port.</description>
            <location chapter="13" section="8.3"/>
            <sub-assertions>
                <assertion required="false" impl-spec="false" defined-by="platform" status="active" testable="false">
                    <id>Servlet:SPEC:159.1</id>
                    <description>As an optimization, a container should reject the connection request if it doesn't match the constrained connection types and return a 403 (SC_FORBIDDEN) status code if it knows that access will ultimately be precluded (by an auth constraint naming with no roles).</description>
                    <location chapter="13" section="8.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:160</id>
            <description>If a constraint naming defined no roles, any attempted requests will result in a 403 (SC_FORBIDDEN).</description>
            <location chapter="13" section="8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:161</id>
            <description>If access is restricted to permitted roles and the request has not been authenticated, the request shall be rejected as unauthorized and a 401 (SC_UNAUTHORIZED) status code shall be returned to cause authentication.</description>
            <location chapter="13" section="8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:162</id>
            <description>If access is restricted to permitted roles and the authentication identity of the request is not a member of any of these roles, the request shall be rejected as forbidden and a 403 (SC_FORBIDDEN) status code shall be returned to the user.</description>
            <location chapter="13" section="8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:163</id>
            <description>If a developer creates a session while a user is not authenticated, and the container then authenticates the user, the session visible to developer code after login must be the same session object that was created prior to login occurring so that there is no loss of session information.</description>
            <location chapter="13" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="removed" testable="true">
            <id>Servlet:SPEC:164</id>
            <description>For all authentication methods in both non-single signon and single signon containers, logout is caused by one of the following situations:</description>
            <location chapter="13" section="10"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="removed" testable="true">
                    <id>Servlet:SPEC:164.1</id>
                    <description>Invalidation of the session.  If this occurs, getUserPrincipal will return a null value.</description>
                    <location chapter="13" section="10"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="removed" testable="true">
                    <id>Servlet:SPEC:164.2</id>
                    <description>Session timeouts.  If this occurs, getUserPrincipal will return a null value.</description>
                    <location chapter="13" section="10"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="removed" testable="true">
                    <id>Servlet:SPEC:164.3</id>
                    <description>An explicit call to HttpSession.invalidateAll.  If this occurs, getUserPrincipal will return a null value.</description>
                    <location chapter="13" section="10"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="removed" testable="true">
                    <id>Servlet:SPEC:164.4</id>
                    <description>An explicit call to HttpSession.logout.If this occurs, getUserPrincipal will return a null value.</description>
                    <location chapter="13" section="10"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:165</id>
            <description>For non-single signon containers, a session invalidating has no effect on login state or session state in other web applications.</description>
            <location chapter="13" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:166</id>
            <description>For single signon containers, logout causes all other active sessions associated with the current user to be invalidated.</description>
            <location chapter="13" section="10"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="platform" status="removed" testable="false">
            <id>Servlet:SPEC:167</id>
            <description>Invalidation or timeout of an individual session causes the termination of that session, but does not cause a logout unless it is the last session for this user, which means that a container is allowed to start a new session for one or more web applications without re-authenticating the user.</description>
            <location chapter="13" section="10"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:168</id>
            <description>Servlet 2.5 web containers may use schema to validate the structure of a deployment descriptor.</description>
            <location chapter="14" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology" status="removed" testable="false">
            <id>Servlet:SPEC:169</id>
            <description>The deployment-extension element provides the ability to inject application or framework specific configuration information directly into the deployment descriptor.</description>
            <location chapter="14" section="1"/>
            <sub-assertions>
                <assertion required="false" impl-spec="false" defined-by="technology" status="removed" testable="false">
                    <id>Servlet:SPEC:169.1</id>
                    <description>If a container uses schema to validate a deployment descriptor, any new content injected into deployment-extension elements as described below will not be validated by the web container.</description>
                    <location chapter="14" section="1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="removed" testable="false">
                    <id>Servlet:SPEC:169.2</id>
                    <description>Deployment extensions are only valid within the top level web-app element or within servlet elements.</description>
                    <location chapter="14" section="1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="removed" testable="false">
                    <id>Servlet:SPEC:169.3</id>
                    <description>Servlet 2.5 containers are required to raise an exception if they do not recognize an extension within a deployment descriptor where the mustUnderstand attribute is 'true'.</description>
                    <location chapter="14" section="1.1"/>
                </assertion>
                <assertion required="false" impl-spec="false" defined-by="technology" status="removed" testable="false">
                    <id>Servlet:SPEC:169.4</id>
                    <description>Servlet 2.5 containers are not required to attempt to process extended deployment information where the nustUnderstand attribute is set to 'false'.</description>
                    <location chapter="14" section="1.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:170</id>
            <description>Security information which may appear in the deployment descriptor is not required to be supported unless the servlet container is part of an implementation of the Java EE specification.</description>
            <location chapter="14" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:193</id>
            <description>The following additional elements exist in the Web application deployment descriptor to meet the requirements of Web containers that are JSP pages enabledor part of a Java EE application server. They are not required to be supported by containers wishing to support only the servlet specification:</description>
            <location chapter="15" section="4.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:171</id>
                    <description>jsp-config</description>
                    <location chapter="15" section="4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:172</id>
                    <description>Syntax for looking up JNDI objects(env-entry, ejb-ref, ejb-local-ref, resource-ref, resource-env-ref)</description>
                    <location chapter="15" section="4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:193.1</id>
                    <description>Syntax for specifying the message destination (message-destination, message- destination-ref)</description>
                    <location chapter="15" section="4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:193.2</id>
                    <description>Reference to a Web service (service-ref)</description>
                    <location chapter="15" section="4.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="removed" testable="true">
            <id>Servlet:SPEC:174</id>
            <description>Web containers must remove all leading and trailing
                whitespace, which is defined as "S(whitespace)" in XML 1.0 (http://www.w3.org/TR/2000/WD-xml-
            2e-20000814), for the element content of the text nodes of a deployment descriptor.</description>
            <location chapter="14" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:175</id>
            <description>The containers and tools that are
                part of Java EE technology-compliant implementation are required to validate
            deployment descriptor against the XML schema for structural correctness.</description>
            <location chapter="14" section="2"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:176</id>
            <description>It is recommended that Web containers and tools that
                manipulate Web applications provide a level of semantic checking. For example, it
                should be checked that a role referenced in a security constraint has the same
            name as one of the security roles defined in the deployment descriptor.</description>
            <location chapter="14" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:10176</id>
            <description>The sub elements under web-app can be in an arbitrary
            order.</description>
            <location chapter="14" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:11276</id>
            <description>The multiplicity
                of the elements distributable, session-config, welcome-file-list, jspconfig,
            login-config, and locale-encoding-mapping-list is "0 or more."</description>
            <location chapter="14" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:11276.1</id>
                    <description>Containers must inform the developer
                        with a descriptive error message when the deployment descriptor contains
                    more than one element of session-config, jsp-config, and login-config.</description>
                    <location chapter="14" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:11276.2</id>
                    <description>The deployment descriptor instance
                        file must not contain multiple elements of session-config,
                    jsp-config, and login-config.</description>
                    <location chapter="14" section="3"/>
                    <comment>From schema.</comment>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:11276.3</id>
                    <description>The container must concatenate the items
                    in welcome-file-list and localeencoding-mapping-list when there are multiple occurrences.</description>
                    <location chapter="14" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:11276.4</id>
                    <description>The multiple
                        occurrence of distributable must be treated exactly in the same way as the
                    single occurrence of distributable.</description>
                    <location chapter="14" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:11276</id>
            <description>URI paths specified in the deployment descriptor are
            assumed to be in URLdecoded form.</description>
            <location chapter="14" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>Servlet:SPEC:11276.1</id>
                    <description>The containers must inform the developer
                    with a descriptive error message when URL contains CR(#xD) or LF(#xA).</description>
                    <location chapter="14" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>Servlet:SPEC:11276.2</id>
                    <description>The containers must
                    preserve all other characters including whitespace in URL.</description>
                    <location chapter="14" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:177</id>
            <description>Containers must attempt to canonicalize paths in present in the deployment descriptor.</description>
            <location chapter="14" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:178</id>
            <description>Paths beginning or resolving to paths that begin with ".." are not valid paths in the deployment descriptor.</description>
            <location chapter="14" section="3"/>
            <comment>Not testable as behavior of container is not defined.</comment>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>Servlet:SPEC:179</id>
            <description>Elements whose valus is an enumerated type must be treated in a case sensitive manner.</description>
            <location chapter="14" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:182</id>
            <description><![CDATA[When a web application is deployed into a container, the following steps must be performed, in this order, before the web application begins processing client requests.
1. Instantiate an instance of each event listener identified by a <listener> element in the deployment descriptor.
2. For instantiated listener instances that implement ServletContextListener, call the contextInitialized() method.
3. Instantiate an instance of each filter identified by a <filter> element in the deployment descriptor and call each filter instances init() method.
                4. Instantiate an instance of each servlet identified by a <servlet> element that includes a <load-on-startup> element in the order defined by the load-onstartup element values, and call each servlet instances init() method.]]>
            </description>
            <location chapter="10" section="12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:183</id>
            <description>The setHeader method sets a header with a given name and value. A previous header is replaced by the new header. Where a set of header values exist for the name, the values are cleared and replaced with the new value.
            </description>
            <location chapter="5" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:184</id>
            <description>Java EE technology-compliant containers are required to provide a mechanism by which a deployer can learn about what jar file containing resources and code are available for the Web application.</description>
            <location chapter="15" section="2"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="platform" status="active" testable="false">
            <id>Servlet:SPEC:185</id>
            <description>Containers should provide a convenient procedure for editing and configuring library files or extensions.</description>
            <location chapter="15" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:186</id>
            <description>Servlet containers that are part of a Java EE product should not allow the application to override Java SE or Java EE platform classes, such as those in the java.* and javax.* namespaces, that either Java SE or Java EE do not allow to be modified.</description>
            <location chapter="15" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:187</id>
            <description>A security identity, or principal, must always be provided for use in a call to an enterprise bean.</description>
            <location chapter="15" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:188</id>
            <description>The default mode in calls to enterprise beans from web applications is for the security identity of a web user to be propagated to the EJB container.</description>
            <location chapter="15" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:189</id>
            <description>web containers are required to allow web users that are not known to the web container or to the EJB container to make calls:</description>
            <location chapter="15" section="3.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:189.1</id>
                    <description>Web containers are required to support access to web resources by clients that have not authenticated themselves to the container. This is the common mode of access to web resources on the Internet.</description>
                    <location chapter="15" section="3.1"/>
                </assertion>
                <assertion required="true" impl-spec="true" defined-by="platform" status="active" testable="false">
                    <id>Servlet:SPEC:189.2</id>
                    <description>Application code may be the sole processor of signon and customization of data based on caller identity.</description>
                    <location chapter="15" section="3.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:190</id>
            <description>a web application deployment descriptor may specify a run-as element. When it is specified, the container must propagate the security identity for any call from a servlet to the EJB layer in terms of the security role name defined in the run-as element. The security role name must be one of the security role names defined for the web application.</description>
            <location chapter="15" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:191</id>
            <description>Web containers running as part of a Java EE platform, the use of run-as elements must be supported both for calls to EJB components within the same Java EE application, and for calls to EJB components deployed in other Java EE applications.</description>
            <location chapter="15" section="3.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:194</id>
            <description>Web containers may choose to support running components written to implement a Web service endpoint as defined by the JAX-RPC and/or JAX-WS specifications.</description>
            <location chapter="15" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:173</id>
            <description>Web containers embedded in a JavaEE conformant implementation are required to support JAX-RPC and JAX-WS web service components.</description>
            <location chapter="15" section="4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:173.1</id>
                    <description>JSR-109 [http://jcp.org/jsr/detail/109.jsp] defines the model for packaging a Web service interface with its associated WSDL description and associated classes.</description>
                    <location chapter="15" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:173.2</id>
                    <description>JSR-109 defines a mechanism for JAX-WS and JAX-RPC enabled Web containers to link to a component that implements this Web service.</description>
                    <location chapter="15" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:173.3</id>
                    <description>JAX-WS and JAX-RPC enabled Web containers must support the developer in using the Web deployment descriptor to define the following information for the endpoint implementation component, using the same syntax as for HTTP Servlet components using the servlet element. The child elements are are used to specify endpoint information in the following way: </description>
                    <location chapter="15" section="4.2"/>
                    <sub-assertions>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:173.3.1</id>
                            <description>the servlet-name element defines a logical name which may be used to locate this endpoint description among the other Web components in the WAR</description>
                            <location chapter="15" section="4.2"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:173.3.2</id>
                            <description>the servlet-class element provides the fully qualified Java class name of this endpoint implementation</description>
                            <location chapter="15" section="4.2"/>
                        </assertion>
                        <assertion required="false" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:173.3.3</id>
                            <description>the description element(s) may be used to describe the component and may be displayed in a tool</description>
                            <location chapter="15" section="4.2"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:173.3.4</id>
                            <description>the load-on-startup element specifies the order in which the component is initialized relative to other Web components in the Web container</description>
                            <location chapter="15" section="4.2"/>
                        </assertion>
                        <assertion required="false" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:173.3.5</id>
                            <description>the security-role-ref element may be used to test whether the authenticated user is in a logical security role</description>
                            <location chapter="15" section="4.2"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:173.3.6</id>
                            <description>the run-as element may be used to override the identity propagated to EJBs called by this component</description>
                            <location chapter="15" section="4.2"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
                <assertion required="false" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:173.4</id>
                    <description>Any servlet initialization parameters defined by the developer for this Web component may be ignored by the container.</description>
                    <location chapter="15" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:173.5</id>
                    <description>JAX-WS and JAXRPC enabled Web component inherits the traditional Web component mechanisms for defining the following information:</description>
                    <location chapter="15" section="4.2"/>
                    <sub-assertions>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:173.5.1</id>
                            <description>mapping of the component to the Web container s URL namespace using the servlet mapping technique</description>
                            <location chapter="15" section="4.2"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:173.5.2</id>
                            <description>authorization constraints on Web components using security constraints</description>
                            <location chapter="15" section="4.2"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:173.5.3</id>
                            <description>the ability to use servlet filters to provide low-level byte stream support for manipulating JAX-WS and/or JAX-RPC messages using the filter mapping technique</description>
                            <location chapter="15" section="4.2"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:173.5.4</id>
                            <description>the timeout characteristics of any HTTP sessions that are associated with the component</description>
                            <location chapter="15" section="4.2"/>
                        </assertion>
                        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                            <id>Servlet:SPEC:173.5.5</id>
                            <description>links to Java EE objects stored in the JNDI namespace</description>
                            <location chapter="15" section="4.2"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:195</id>
            <description>Annotations must be supported on the following container managed classes that implement the following interfaces and are declared in the web application deployment descriptor.</description>
            <location chapter="15" section="5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:195.1</id>
                    <description>javax.servlet.Servlet</description>
                    <location chapter="15" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:195.2</id>
                    <description>javax.servlet.Filter</description>
                    <location chapter="15" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:195.3</id>
                    <description>javax.servlet.ServletContextListener</description>
                    <location chapter="15" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:195.4</id>
                    <description>javax.servlet.ServletContextAttributeListener</description>
                    <location chapter="15" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:195.5</id>
                    <description>javax.servlet.ServletRequestListener</description>
                    <location chapter="15" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:195.6</id>
                    <description>javax.servlet.ServletRequestAttributeListener</description>
                    <location chapter="15" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:195.7</id>
                    <description>javax.servlet.http.HttpSessionListener</description>
                    <location chapter="15" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:195.8</id>
                    <description>javax.servlet.http.HttpSessionAttributeListener</description>
                    <location chapter="15" section="5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:196</id>
            <description>References must be injected prior to any lifecycle methods being called and the component instance being made available the the application.</description>
            <location chapter="15" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:197</id>
            <description>In a web application, classes using resource injection will have their annotations processed only if they are located in the WEB-INF/classes directory, or if they are packaged in a jar file located in WEB-INF/lib.</description>
            <location chapter="15" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:198</id>
            <description>The web application deployment descriptor contains a new  full  attribute on the web-app element. The full attribute defines whether the web descriptor is complete, or whether the class files of the jar file should be examined for annotations that specify deployment information. If full is set to "true", the deployment tool must ignore any Servlet annotations present in the class files of the application. If the full attribute is not specified or is set to "false", the deployment tool must examine the class files of the application for annotations, as previously specified.</description>
            <location chapter="15" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:199</id>
            <description>Following are the annotations that are required by a Java EE technology compliant web container.</description>
            <location chapter="15" section="5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:199.1</id>
                    <description>@Resource annotation is used to declare a reference to a resource such as a data source, Java Messaging Service (JMS) destination, or environment entry. This annotation is equivalent to declaring a resource-ref, message-destinationref or env-ref, or resource-env-ref element in the deployment descriptor.  Resource annotation is specified on a class, method or field. The container is responsible injecting references to resources declared by the Resource annotation and mapping it to the proper JNDI resources.</description>
                    <location chapter="15" section="5.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:199.2</id>
                    <description>@Resources annotation acts as a container for multiple Resource annotations because the Java MetaData specification does not allow for multiple annotations with the same name.</description>
                    <location chapter="15" section="5.11"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:199.3</id>
                    <description>InjectionComplete annotation is declared on a method which will be called after the resources injections have been completed and before any lifecycle methods on a component are called. This allows application code to do post create processing if necessary.</description>
                    <location chapter="15" section="5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:199.4</id>
                    <description>Enterprise JavaBeansTM 3.0 (EJB) components may referenced from a web component using the @EJB annotation. @EJB annotation provides the equivalent functionality of declaring the ejb-ref or ejb-local-ref elements in the deployment descriptor. Fields that have a corresponding @EJB annotation are injected with the a reference to the corresponding EJB component.</description>
                    <location chapter="15" section="5.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:199.5</id>
                    <description>@WebServiceRef annotation provides a reference to a web service in a web component in same way as a resource-ref element would in the deployment descriptor.</description>
                    <location chapter="15" section="5.13"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:199.6</id>
                    <description>This annotation is used to define the security roles that comprise the security model of the application. This annotation is specified on a class, and it typically would be used to define roles that could be tested (i.e., by calling isUserInRole) from within the methods of the annotated class. It could also be used to declare application roles that are not implicitly declared as the result of their use in a @RolesReferenced annotation on the class implementing the javax.servlet. Servlet interface or a subclass thereof.</description>
                    <location chapter="15" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
                    <id>Servlet:SPEC:199.7</id>
                    <description>The @RunAs annotation is equivalent to the run-as element in the deployment descriptor. The @RunAs annotation may only be defined in classes implementing the javax.servlet.Servlet interface or a subclass thereof.</description>
                    <location chapter="15" section="5.12"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="platform" status="active" testable="true">
            <id>Servlet:SPEC:201</id>
            <description>A web application is NOT required to contain a web.xml if it does NOT contain any Servlet, Filter, or Listener components. In other words an application containing only static files or JSP pages does not require a web.xml to be present.
            </description>
            <location chapter="10" section="13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:204</id>
            <description>sessions of a context must be resumable by requests into
                that context regardless of whether their associated context was being
                accessed directly or as the target of a request dispatch at the time
                the sessions were created.
            </description>
            <location chapter="A" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:205</id>
            <description>(The target servlet of the include method) cannot set
                headers or call any method that affects the headers of the response,
                with the exception of the HttpServletRequest.getSession() and
                HttpServletRequest.getSession(boolean) methods.
                Any attempt to set the headers must be ignored,
                and any call to HttpServletRequest.getSession() or
                HttpServletRequest.getSession(boolean) that would require adding a
                Cookie response header must throw an IllegalStateException
                if the response has been committed.
            </description>
            <location chapter="A" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:206</id>
            <description>clarify a way to map a filter to all servlet dispatches
                ... uses the special servlet name '*'.
            </description>
            <location chapter="A" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:207</id>
            <description>The deployment descriptor servlet-mappingType was updated to...
                For servlets mapped to multiple URLs
            </description>
            <location chapter="A" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:208</id>
            <description>allows multiple patterns and servlet names
            to be defined in a single mapping</description>
            <location chapter="A" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:209</id>
            <description>The http-method elements now need to be a token
                as described in HTTP 1.1 specification section 2.2.
            </description>
            <location chapter="A" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:210</id>
            <description>If the location of the error handler is a servlet or a JSP page: [...]
                The response setStatus method is disabled and ignored if called.
            </description>
            <location chapter="A" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:211</id>
            <description>The API clarification better describes what happens
                when a client did not specify a session id.
                The API documentation in Section SRV.16.1.3,  HttpServletRequest
                was updated to specify when false is returned:
                Returns false if the client did not specify any session ID.
            </description>
            <location chapter="A" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:212</id>
            <description>Section SRV.5.5,  Closure of Response Object was updated
                to the following: "The amount of content specified in the
                setContentLength method of the response has been greater than zero
                and has been written to the response".
                the response's content length is set to 0 via
                response.setHeader("Content-Length", "0")
                and any subsequently setHeader() calls are ignored.
            </description>
            <location chapter="A" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:213</id>
            <description>The API in Section SRV.15.2.16,  ServletRequest
                was updated to described the behavior if the method is called
                after the getReader() was called. If the getReader() is called
                there will be no effect.
            </description>
            <location chapter="A" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:214</id>
            <description>
                Servlet containers are required to support the use of these annotations
                within classes that extend the javax.servlet.http.HttpServlet abstract
                class.
            </description>
            <location chapter="14" section="4"/>
            <comment>
                "these annotations" are the 4 security annotations of:
                 @RolesAllowed, @DenyAll, @PermitAll, and @TransportProtected
            </comment>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:215</id>
            <description>
                When specified on a class target, these annotations apply to all requests
                processed by the public service method of the HttpServlet implementation class.
            </description>
            <location chapter="14" section="4"/>
            <comment>
                "these annotations" are the 4 security annotations of:
                 @RolesAllowed, @DenyAll, @PermitAll, and @TransportProtected
            </comment>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:216</id>
            <description>
                When an annotation is specified at both the class and method level, the method
                targeted annotation overrides that on the class (for the method).
            </description>
            <location chapter="14" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:217</id>
            <description>
                When the metadata-complete attribute is set in the portable deployment
                descriptor, the annotations described in this section have no effect on
                the access control policy enforced by the container on behalf of the
                corresponding web module or web fragment.
            </description>
            <location chapter="14" section="4"/>
            <comment>
                "the annotations" are the 4 security annotations of:
                 @RolesAllowed, @DenyAll, @PermitAll, and @TransportProtected
            </comment>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:218</id>
            <description>
                When a security-constraint in the portable deployment descriptor
                includes a url-pattern that matches a request URL, the security
                annotations described in this section have no effect on the access
                policy that applies to the request URL.
            </description>
            <location chapter="14" section="4"/>
            <comment>
                "the security annotations" are the 4 security annotations of:
                 @RolesAllowed, @DenyAll, @PermitAll, and @TransportProtected
            </comment>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>Servlet:SPEC:219</id>
            <description>
                When none of these annotations have been assigned to the class and method
                targets corresponding to a request, the access policy that is applied to
                the request is established by the applicable security constraints, if any,
                in the corresponding portable deployment descriptor.
            </description>
            <location chapter="14" section="4"/>
            <comment>
                "these annotations" are the 4 security annotations of:
                 @RolesAllowed, @DenyAll, @PermitAll, and @TransportProtected
            </comment>
        </assertion>
    </assertions>
</spec>
