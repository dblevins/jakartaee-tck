<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

		<!-- Chapter 6	SOAP Binding -->
        <!-- next available id is 6015 -->
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6001</id>
			<description>In a RPC Style Webservice : The @WebParam.mode annotation determines the messages in which a particular parameter appears.  IN parameters appear as parts in the input message, OUT parameters appear as parts in the output message, and INOUT parameters appear as parts in both messages.</description>
			<location chapter = "6" section = "1.1"/>
		</assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6002</id>
			<description>In a RPC Style Webservice : The order of parameters in the method signature determines the order of the parts in the input and output message.  The return value is the first part in the output message.</description>
			<location chapter = "6" section = "1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6003</id>
			<description>In a RPC Style Webservice : JSR-181 implementations MUST support both the "wrapped" and "bare" styles of document / literal operation.  The developer may specify which of these styles is in effect for a particular operation by using the @SOAPBinding.parameterStyle annotation.</description>
			<location chapter = "6" section = "1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6004</id>
			<description>In the "doc wrapped" operation style, the input and output messages contain a single part which refers (via the element attribute) to a global element declaration (the wrapper) of complexType defined using the xsd:sequence compositor.  The global element declaration for the input message has a local name equal to @WebMethod.operationName.  The global element declaration for the output message (if it exists) has a local name equal to @WebMethod.operationName + "Response".  Both global element declarations appear in the @WebService.targetNamespace.</description>
			<location chapter = "6" section = "1.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6005</id>
			<description>In a Doc Wrapped Webservice : Non-header method parameters and return values map to child elements of the global element declarations defined for the method.  The order of parameters in the parameter list determines the order in which the equivalent child elements appear in the operation's global element declarations.</description>
			<location chapter = "6" section = "1.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>6006</id>
			<description>In a Doc Wrapped Webservice : The @WebParam.name and @WebParam.targetNamespace attributes determine the QName of a parameter's child element, while the @WebResult.name and @WebResult.targetNamespace annotations determines the QName of the return value's child element.  The schema type for each child element is derived from the type of the Java parameter or return value, as described in section 5 Java Mapping To XML/WSDL.</description>
			<location chapter = "6" section = "1.2.1"/>
		</assertion>
        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6007</id>
			<description>In the "bare" operation style, the input and output messages contain a single part which refers (via the element attribute) to an element that is mapped from the method parameter and return value.  The QName of the input body element is determined by the values of the @WebParam.name and @WebParam.targetNamespace annotations on the method parameter, and the QName of the output body element is determined by the values of the @WebResult.name and @WebResult.targetNamespace annotations.  The schema types for the input and output body elements are derived from the types of the Java parameter or return values, as described in section 5 Java Mapping To XML/WSDL.</description>
			<location chapter = "6" section = "1.2.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6008</id>
			<description>In a Doc Bare Webservice : If the operation is marked @Oneway, it MUST have a void return value, a single non-header parameter marked as IN and zero or more header parameters.The mapped wsdl:operation contains both wsdl:input and wsdl:output elements, unless the method is annotated as @Oneway.</description>
			<location chapter = "6" section = "1.2.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6009</id>
			<description>In a Doc Bare Webservice : If the operation is not marked @Oneway, A non-header parameter marked as IN, a non-header parameter marked as OUT, a void return value and zero or more header parameters..</description>
			<location chapter = "6" section = "1.2.2"/>
		</assertion>
        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6010</id>
			<description>In a Doc Bare Webservice : If the operation is not marked @Oneway, 	A single non-header parameters marked as IN_OUT, a void return value and zero or more header parameters.</description>
			<location chapter = "6" section = "1.2.2"/>
		</assertion>
                 <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6011</id>
			<description>Every document "bare" operation on the Web Service MUST take and return Java types that map to distinct elements, or the developer MUST use the @WebParam and @WebResult annotations to explicitly specify the QNames of the input and output XML elements for each operation.</description>
			<location chapter = "6" section = "1.2.2"/>
		</assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6012</id>
			<description>Parameters annotated with the @WebParam.header attribute map to SOAP headers instead of elements in the SOAP body.  Header parameters appear as parts in the operation's input message, output message, or both depending on the value of the @WebParam.mode attribute.  Header parameters are included as soap:header elements in the appropriate wsdl:input and wsdl:output sections of the binding operation.  Headers are always literal.  The @WebParam.name and @WebParam.targetNamespace annotations determine the QName of the XML element representing the header.</description>
			<location chapter = "6" section = "2"/>
		</assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>6013</id>
			<description>Results annotated with the @WebResult.header attribute map to SOAP headers instead of elements in the SOAP body.  Header results appear as parts in the operation's output message.  Header results are included as soap:header elements in the appropriate wsdl:output sections of the binding operation.  Headers are always literal.  The @WebResult.name and @WebResult.targetNamespace annotations determine the QName of the XML element representing the header.  This QName must be unique within all headers of the method.</description>
			<location chapter = "6" section = "2"/>
		</assertion>







                






		
