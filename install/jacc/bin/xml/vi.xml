<?xml version="1.0"?>
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<project name="Vendors (JACC) Implementation Configuration" basedir="." default="usage">
    <import file="impl/glassfish/s1as.xml" optional="true"/>
    <import file="../../../../bin/xml/impl/glassfish/s1as.xml" optional="true"/>
    <property name="server.instance"    value="${s1as.server}"/>
    <target name="config.vi"  depends= "add.jacc.users, copy.jacc.provider.jar, copy.jacc.ext.jars, set.orb.port, set.http.ports, add.cert, enable.https.server,enable.jacc, restart.server" >
    </target>
    <target name="clean.vi"  depends= "drop.jacc.users, delete.jacc.ext.jars,disable.jacc" >
    </target>

    <!--
      add.cts.users configures the users required by cts.
    -->
    <target name="add.jacc.users" depends="configPlatform">
        <antcall target="create-file-user" >
            <param name="userpassword" value="adminadmin"/>
            <param name="usergroups" value="asadmin"/>
            <param name="userName" value="admin"/>
        </antcall>
        <antcall target="create-file-user" >
            <param name="userpassword" value="j2ee"/>
            <param name="usergroups" value="staff:mgr:asadmin"/>
            <param name="userName" value="j2ee"/>
        </antcall>
        <antcall target="create-file-user" >
            <param name="userpassword" value="javajoe"/>
            <param name="usergroups" value="guest"/>
            <param name="userName" value="javajoe"/>
        </antcall>
        <antcall target="create-file-user" >
            <param name="userpassword" value="j2ee_vi"/>
            <param name="usergroups" value="staff"/>
            <param name="userName" value="j2ee_vi"/>
        </antcall>
    </target>


    <!--
      drop.cts.users removes the users required by cts.
    -->
    <target name="drop.jacc.users" depends="configPlatform">
        <antcall target="delete-file-user" >
            <param name="userName" value="admin"/>
        </antcall>
        <antcall target="delete-file-user" >
            <param name="userName" value="j2ee"/>
        </antcall>
        <antcall target="delete-file-user" >
            <param name="userName" value="javajoe"/>
        </antcall>
        <antcall target="delete-file-user" >
            <param name="userName" value="j2ee_vi"/>
        </antcall>
    </target>


    <!--
       copies the jacc jar files to the instance lib directory.
    -->
    <target name="copy.jacc.provider.jar">
        <copy file="${ts.home}/lib/tsprovider.jar" tofile="${jacc.home}/lib/tsprovider.jar" overwrite="yes" />
    </target>
    <target name="delete.jacc.provider.jar">
        <delete file="${jacc.home}/lib/tsprovider.jar" quiet="true"/>
    </target>


   <target name="copy.jacc.ext.jars">
        <copy file="${ts.home}/lib/jacctck.jar" todir="${extension.dir}"/>
        <copy file="${ts.home}/lib/tsharness.jar" todir="${extension.dir}"/>
    </target>

     <target name="delete.jacc.ext.jars">
       <delete file="${extension.dir}/jacctck.jar" quiet="true"/>
       <delete file="${extension.dir}/tsharness.jar" quiet="true"/>
    </target>




    <!-- Enable the use of jacc for the app server under test -->
    <target name="enable.jacc" >
        <ant antfile="impl/glassfish/s1as.xml" dir="${common.bin.dir}/xml" target="enable.jacc"/>
    </target>
    <target name="disable.jacc" >
        <ant antfile="impl/glassfish/s1as.xml" dir="${common.bin.dir}/xml" target="disable.jacc"/>
    </target>
    <target name="set.orb.port" depends="configPlatform" >
        <antcall target="set" >
            <param name="set.value" value=" ${server.instance}-config.iiop-service.iiop-listener.${instance.listenerName}.port=${orb.port}"/>
        </antcall>
    </target>

    <!-- Configure the http and https port -->
    <target name="set.http.ports" depends="configPlatform">
        <antcall target="set" >
            <param name="set.value" value=" ${server.instance}-config.network-config.network-listeners.network-listener.http-listener-1.port=${webServerPort}"/>
        </antcall>
        <antcall target="set" >
            <param name="set.value" value=" ${server.instance}-config.network-config.network-listeners.network-listener.http-listener-2.port=${securedWebServicePort}"/>
        </antcall>
    </target>

    <!-- Enable Https server -->
    <target name="enable.https.server" depends="configPlatform">
        <antcall target="set" >
            <param name="set.value" value=" ${server.instance}-config.network-config.network-listeners.network-listener.http-listener-2.enabled=true"/>
        </antcall>
    </target>

     <!--
       Add cts certificate to truststore 
     -->
    <target name="add.cert" depends="configPlatform,checkForFiles" >
        <antcall target="import.cert" >
            <param name="cert.alias" value="${client.cert.alias}" />
            <param name="cert.file" value="${cert.file}" />
            <param name="trustStore.password" value="${keystore.password}" />
            <param name="trustStore"
                   value="${s1as.domain.dir}/${s1as.domain.name}/config/cacerts.jks"/>
        </antcall>
    </target>
    <target name="import.cert" depends="configPlatform,checkForFiles" >
        <exec executable="${exec.keytool}" >
            <env key="JAVA_HOME" value="${java.home}" />
            <arg line=" ${exec.keytool.part2}" />
            <arg line=" -import"/>
            <arg line=" -alias ${cert.alias}"/>
            <arg line=" -file ${cert.file}"/>
            <arg line=" -noprompt"/>
            <arg line=" -trustcacerts"/>
            <arg line=" -keystore ${trustStore}"/>
            <arg line=" -storepass ${trustStore.password}"/>
        </exec>
    </target>

    <!--
      checkForFiles determines if the following files exist:
      keystore.jks, cacerts.jks
    -->
    <target name="checkForFiles">
        <condition property="java.keystore.generated" >
            <and>
                <available  file="${keystore.jks}" type="file" />
                <available  file="${cacerts.jks}" type="file" />
            </and>
        </condition>
    </target>
</project>
