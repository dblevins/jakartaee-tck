<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<project name="S1AS Deployment" default="deploy">
 
    <!--
        S1AS Deployment properties: These must be set by the user

        s1as.home - base directory of S1AS installation
        s1as.admin.host - hostname of the machine the admin server is running on
        s1as.admin.port - port number that the admin server is bound to
        s1as.admin.user - S1AS administrative username
        s1as.admin.passwd - password for the user as defined by s1as.admin.user
    -->
    <property name="s1as.home" value="${jacc.home}"/>
    <property name="s1as.autodeploy.dir"
      value="${s1as.home}/domains/domain1/autodeploy"/>
    <property name="s1as.admin.host" value="localhost"/>
    <property name="s1as.admin.port" value="4848"/>
    <property name="s1as.admin.user" value="admin"/>
    <property name="s1as.admin.passwd" value="adminadmin"/>
    <property name="timeout" value="900000"/>
    <property name="new.line" value="${line.separator}" />

    <propertyregex property="pkg.dir"
                   input="${basedir}"
                   regexp=".*src[\/|\\](.*)"
                   select="\1"
                   casesensitive="true"
                   override="true"/>


    <!-- DO NOT EDIT below here-->
    <property name="s1as.asadmin" value="${s1as.home}/bin/asadmin"/>
    <target name="-check-os">
        <condition property="exec.name" value="cmd.exe">
            <os family="windows"/>
        </condition>
        <condition property="exec.arg.1" value="/c ${s1as.asadmin}">
            <os family="windows"/>
        </condition>
        <property name="exec.name" value="${s1as.asadmin}"/>
        <property name="exec.arg.1" value=""/>
    </target>
    
    <!-- Deployment            -->
    <target name="deploy" depends="autodeploy"/>


    <!-- 
          deploy.all will deploy the web based jacc tests if the (ts.jte) javaee.level
          property is set to "web".   If the javaee.level property is set to "javaee" 
          then the (web based + ejb based) jacc tests will be deployed.  

          Note:  the ejb based jacc tests currently (as of GF v4.0) appear to 
          operate within the ejblite container and so *may* be valid to run inside
          the web profile.  But for now, we assume they are to be run in a
          full EE platform.  

          If no additional EJB jacc tests are added then we should be able to  
          run them within an ejblite container so this ant target will be 
          changed to allow these ejb/mr tests to deploy and run inside the
          web profile environment.
      -->
    <target name="deploy.all" >
        <if>
          <contains string="${javaee.level}" substring="full"/>
        <then>
            <echo>*******************************************************</echo>
            <echo>Java EE PROFILE in use, Deploying EJB-based-JACC tests.</echo>
            <echo>*******************************************************</echo>

            <antcall target="autodeploy">
                <param name="pkg.dir" value="com/sun/ts/tests/jacc/ejb/mr"/>
            </antcall>
        </then>
        <else>
            <echo>*******************************************************</echo>
            <echo>Web PROFILE in use, NOT deploying EJB-based-JACC tests.</echo>
            <echo>*******************************************************</echo>
        </else>
        </if>

        <antcall target="autodeploy">
            <param name="pkg.dir" value="com/sun/ts/tests/jacc/web/containerContracts"/>
        </antcall>
        <antcall target="autodeploy">
            <param name="pkg.dir" value="com/sun/ts/tests/jacc/web/principal2role"/>
        </antcall>
        <antcall target="autodeploy">
            <param name="pkg.dir" value="com/sun/ts/tests/jacc/web/providerContracts"/>
        </antcall>
        <antcall target="autodeploy">
            <param name="pkg.dir" value="com/sun/ts/tests/jacc/web/toolsContracts"/>
        </antcall>
    </target>


    <!-- <target name="deploy" depends="asadmin.deploy"/> -->
    <target name="autodeploy" depends="add.sun.specific.xml">
        <available file="${s1as.autodeploy.dir}" type="dir" 
        property="s1as.autodeploy.dir.present"/>
        <fail unless="s1as.autodeploy.dir.present" 
        message="s1as.autodeploy.dir does not exist: ${s1as.autodeploy.dir}"/>
        <copy todir="${s1as.autodeploy.dir}" overwrite="yes">
            <fileset dir="${dist.dir}/${pkg.dir}" includes="**/*.war, **/*.jar"/>
        </copy>
    </target>

    <target name="asadmin.deploy" depends="-check-os">
        <exec executable="${exec.name}" timeout="${timeout}">
            <arg line="${exec.arg.1}"/>
            <arg line="deploy"/>
            <arg line="--user ${s1as.admin.user}"/>
            <arg line="--password ${s1as.admin.passwd}"/>
            <arg line="--host ${s1as.admin.host}"/>
            <arg line="--port ${s1as.admin.port}"/>
            <arg line="${dist.dir}/${pkg.dir}/${app.name}_web.war"/>
        </exec>
    </target>
    
    <!-- add users and roles required by security tests -->
    <target name="add.users">
        <antcall target="create-file-user" >
            <param name="userpassword" value=" j2ee"/>
            <param name="usergroups" value=" staff:mgr"/>
            <param name="userName" value=" j2ee"/>
        </antcall>
        <antcall target="create-file-user" >
            <param name="userpassword" value=" javajoe"/>
            <param name="usergroups" value=" guest"/>
            <param name="userName" value=" javajoe"/>
        </antcall>
        <antcall target="create-file-user" >
            <param name="userpassword" value=" j2ee_vi"/>
            <param name="usergroups" value=" staff"/>
            <param name="userName" value=" j2ee_vi"/>
        </antcall>
         <!-- start-domain may hang on windows due to ant limitation
         <antcall target="stop.domain"/>
         <antcall target="start.domain"/>
         -->
        <echo>
IMPORTANT:
You will need to restart the server for the new users to take effect.
        </echo>
    </target>
    <target name="stop.domain" depends="-check-os">
        <exec executable="${exec.name}" timeout="${timeout}">
            <arg line="${exec.arg.1}"/>
            <arg line="stop-domain"/>
        </exec>
    </target>
    <target name="start.domain" depends="-check-os">
        <exec executable="${exec.name}" timeout="${timeout}">
            <arg line="${exec.arg.1}"/>
            <arg line="start-domain"/>
        </exec>
    </target>

    <!-- add sun-web.xml to war file -->
    <target name="add.sun.specific.xml">
        <for param="archivefile" >
            <path>
                <fileset dir="${dist.dir}/${pkg.dir}" includes="*.war, *.jar" />
            </path>
            <sequential>
                <if>
                    <contains substring="web.war" string="@{archivefile}" />
                    <then>
                        <propertyregex property="warfile.prefix"
                                       input="@{archivefile}"
                                       regexp=".*[\/|\\](.*).war"
                                       replace="\1"
                                       casesensitive="false" 
                                       override="true" />
                        <copy file="${src.dir}/${pkg.dir}/${warfile.prefix}.war.sun-web.xml"
                              tofile="${dist.dir}/${pkg.dir}/sun-web.xml" />
                        <war destfile="@{archivefile}" update="true">
                            <webinf dir="${dist.dir}/${pkg.dir}" includes="sun-web.xml"/>
                        </war>
                        <delete file="${dist.dir}/${pkg.dir}/sun-web.xml" />
                    </then>
                    <elseif>
                        <contains substring="ejb.jar" string="@{archivefile}" />
                        <then>
                            <propertyregex property="jarfile.prefix"
                                           input="@{archivefile}"
                                           regexp=".*[\/|\\](.*).jar"
                                           replace="\1"
                                           casesensitive="false" 
                                           override="true" />
                            <copy file="${src.dir}/${pkg.dir}/${jarfile.prefix}.jar.sun-ejb-jar.xml"
                tofile="${dist.dir}/${pkg.dir}/sun-ejb-jar.xml" />
                            <jar destfile="@{archivefile}" update="true">
                                <metainf dir="${dist.dir}/${pkg.dir}" includes="sun-ejb-jar.xml"/>
                            </jar>
                            <delete file="${dist.dir}/${pkg.dir}/sun-ejb-jar.xml" />
                        </then>
                    </elseif>
                </if>
            </sequential>
        </for>
    </target>
    <target name="undeploy" depends="-check-os">
        <!-- List currently deployed applications -->
        <exec executable="${exec.name}" timeout="${timeout}"
              outputProperty="deployedApps">
            <arg line="${exec.arg.1}"/>
            <arg line="list-components"/>
            <arg line="--user ${s1as.admin.user}"/>
            <arg line="--passwordfile ${ts.home}/bin/password.txt"/>
            <arg line="--host ${s1as.admin.host}"/>
            <arg line="--port ${s1as.admin.port}"/>
        </exec>
        <echo message="Deployed Apps :${deployedApps}" />
        <if>
            <contains substring="jacc" string="${deployedApps}" />
            <then>
                <for list="${deployedApps}" param="appname" delimiter=" ">
                    <sequential>
                        <if>
                            <!-- take only the applications that starts with jacc_*
                                  and undeploy -->
                            <and>
                                <contains substring="jacc_web" string="@{appname}" />
                                <not>
                                    <contains substring="${new.line}" string="@{appname}" />
                                </not>
                            </and>
                            <then>
                                <echo message="appname : @{appname}" />
                                <exec executable="${exec.name}" timeout="${timeout}" >
                                    <arg line="${exec.arg.1}"/>
                                    <arg line="undeploy"/>
                                    <arg line="--user ${s1as.admin.user}"/>
                                    <arg line="--passwordfile ${ts.home}/bin/password.txt"/>
                                    <arg line="--host ${s1as.admin.host}"/>
                                    <arg line="--port ${s1as.admin.port}"/>
                                    <arg line="@{appname}"/>
                                </exec>
                            </then>
                            <elseif>
                                <contains substring="${new.line}" string="@{appname}" />
                                <then>
                                    <propertyregex property="newappname"
                       input="@{appname}"
                       regexp=".web.${new.line}(.*)"
                       select="\1"
                       casesensitive="false"
                       override="true"/>
                                    <if>
                                        <isset property="newappname"/>
                                        <then>
                                            <if>
                                                <contains substring="jacc_web" string="${newappname}" />
                                                <then>
                                                    <echo message="new appname : ${newappname}" />
                                                    <exec executable="${exec.name}" timeout="${timeout}" >
                                                        <arg line="${exec.arg.1}"/>
                                                        <arg line="undeploy"/>
                                                        <arg line="--user ${s1as.admin.user}"/>
                                                        <arg line="--passwordfile ${ts.home}/bin/password.txt"/>
                                                        <arg line="--host ${s1as.admin.host}"/>
                                                        <arg line="--port ${s1as.admin.port}"/>
                                                        <arg line="${newappname}"/>
                                                    </exec>
                                                </then>
                                            </if>
                                        </then>
                                    </if>
                                </then>
                            </elseif>
                        </if>
                    </sequential>
                </for>
            </then>
        </if>
    </target>
</project>
