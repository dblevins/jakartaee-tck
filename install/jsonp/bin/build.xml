<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2013, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<!--
$Id$
-->

<project name="TS top level" default="usage">

    <import file="xml/ts.top.import.xml" optional="true"/>
    <import file="../../../bin/xml/ts.top.import.xml" optional="true"/>

    <property name="all.test.dir" value="
               com/sun/ts/tests/signaturetest/jsonp,
               com/sun/ts/tests/jsonp"/>

    <!-- run.test.dir - all tests except the SPI plugin tests -->
    <property name="run.test.dir" value="
               com/sun/ts/tests/signaturetest/jsonp,
               com/sun/ts/tests/jsonp/api"/>

    <!-- run.all - runs all tests except the SPI plugin tests -->
    <target name="run.all" description="Runs all tests (except pluggability tests) in batch mode">
        <property name="tests.string" value=""/>
        <echo message="Running all tests from the following directories..."/>
        <for list="${run.test.dir}" param="ii" trim="true">
          <sequential>
            <var name="tests.string" value="${tests.string} @{ii}"/>
          </sequential>
        </for>
	<!-- We want both runclient, run.pluggability and run.report to run so put in try/catch block -->
        <trycatch>
            <try>
                <antcall target="runclient"/>
            </try>
            <catch>
                <echo message="Ensure run.pluggability is called"/>
            </catch>
            <finally>
		<trycatch>
		    <try>
                        <antcall target="run.pluggability" />
		    </try>
                    <catch>
                        <echo message="Ensure run.report is called."/>
                    </catch>
		    <finally>
                        <antcall target="run.report" />
		    </finally>
		</trycatch>
            </finally>
        </trycatch>
    </target> 

    <!-- run.pluggability - runs the SPI plugin tests -->
    <target name="run.pluggability" description="Runs the pluggability tests to verify SPI in batch mode">
        <echo message="Running pluggability tests to verify spi plugin mechanism to our own JsonProvider class ..."/>
        <antcall target="enable.alternate.jsonp.provider" />
        <trycatch>
            <try>
		<!-- Override previous list of tests to execute. -->
		<var name="tests.string" value="com/sun/ts/tests/jsonp/pluggability"/>
                <ant antfile="build.xml" dir="${ts.home}/src/com/sun/ts/tests/jsonp/pluggability" target="runclient" /> 
            </try>
            <catch>
                <echo message="Ensure disable.alternate.jsonp.provider is called"/>
            </catch>
            <finally>
                <antcall target="disable.alternate.jsonp.provider" />
            </finally>
        </trycatch>
    </target> 

    <!-- enable.alternate.jsonp.provider
         Enable our JsonProvider by ensuring our service class is in classpath before RI jars.
    -->
    <target name="enable.alternate.jsonp.provider" depends="translatepath" description="Enable the alternate jsonp provider for the pluggability tests">
	<echo message="Enable our alternate JsonProvider class for the pluggability tests ..."/>

        <replaceregexp file="${bin.dir}/ts.jte"
	    match="jsonp.alt.provider.classes=.*"
	    replace="jsonp.alt.provider.classes=$${ts.home}/lib/jsonp_alternate_provider.jar" />

    </target> 

    <!-- disable.alternate.jsonp.provider
         Disable our JsonProvider by removing our service class from classpath.
    -->
    <target name="disable.alternate.jsonp.provider" description="Disable the alternate jsonp provider for the pluggability tests">
	<echo message="Disable our alternate JsonProvider class for the pluggability tests ..."/>

        <replaceregexp file="${bin.dir}/ts.jte"
	    match="jsonp.alt.provider.classes=.*"
	    replace="jsonp.alt.provider.classes=jsonp.alt.provider.classes" />

    </target>

    <target name="run.report" >
	<echo message="Running JavaTest report followed by a summary report"/>
	<antcall target="report"/>
        <report.summary dirs="com/sun/ts/tests/jsonp,
                              com/sun/ts/tests/signaturetest/jsonp"/>
    </target>

    <!--
	run.fileutfconverter 

	Utility program for converting a UTF-8 file to various UTF encoded files
        and vice-versa.
file
	Takes the following properties on command line:

	o tofrom
	o encoding
	o infile
	o outfile

	Examples)

	Convert a UTF-8 file (fooUTF8) to encoding (UTF-16) and write to file (fooUTF16)
	ant -Dtofrom=-toUTF -Dencoding=UTF-16 -Dinfile=fooUTF8 -Doutfile=fooUTF16 run.fileutfconverter

	Convert a UTF-16 encoded file (fooUTF16) from encoding (UTF-16) and write to UTF-8 file (fooUTF8)
	ant -Dtofrom=-fromUTF -Dencoding=UTF-16 -Dinfile=fooUTF16 -Doutfile=fooUTF8 run.fileutfconverter
    -->
    <target name="run.fileutfconverter" description="Run the FileUTFConverter utility">
	<if>
	    <and>
		<isset property="tofrom"/>
		<isset property="encoding"/>
		<isset property="infile"/>
		<isset property="outfile"/>
	    </and>
	<then>
	    <echo message="Running FileUTFConverter utility"/>
	    <java fork="true"
	        failonerror="false"
	        classname="com.sun.ts.tests.jsonp.util.FileUTFConverter"
	        classpath="${ts.home}/classes">
	       <arg line="${tofrom} ${encoding} ${infile} ${outfile}"/>
	    </java>
	</then>
	<else>
	    <echo message="Examples:"/>
	    <echo message="--------"/>
	    <echo message="Convert a UTF-8 file (fooUTF8) to encoding (UTF-16) and write to file (fooUTF16)"/>
	    <echo message="ant -Dtofrom=-toUTF -Dencoding=UTF-16 -Dinfile=fooUTF8 -Doutfile=fooUTF16 run.fileutfconverter"/>
	    <echo message=""/>
	    <echo message="Convert a UTF-16 encoded file (fooUTF16) from encoding (UTF-16) and write to UTF-8 file (fooUTF8)"/>
	    <echo message="ant -Dtofrom=-fromUTF -Dencoding=UTF-16 -Dinfile=fooUTF16 -Doutfile=fooUTF8 run.fileutfconverter"/>
	</else>
	</if>
    </target>

    <!--
	run.stringutfconverter 

	Utility program for converting a string to various UTF encoded files.
file
	Takes the following properties on command line:

	o instring
	o encoding
	o outfile

	Examples)

	Convert a string ("foo") to encoding (UTF-16LE) and write to file (fooUTF16LE)
	ant -Dinstring="foo" -Dencoding=UTF-16LE -Doutfile=fooUTF16LE run.stringutfconverter
    -->
    <target name="run.stringutfconverter" description="Run the StringUTFConverter utility">
	<if>
	    <and>
		<isset property="instring"/>
		<isset property="encoding"/>
		<isset property="outfile"/>
	    </and>
	<then>
	    <echo message="Running StringUTFConverter utility"/>
	    <java fork="true"
	        failonerror="false"
	        classname="com.sun.ts.tests.jsonp.util.StringUTFConverter"
	        classpath="${ts.home}/classes">
	       <arg line="${instring} ${encoding} ${outfile}"/>
	    </java>
	</then>
	<else>
	    <echo message="Examples:"/>
	    <echo message="--------"/>
	    <echo message="Convert a string (foo) to encoding (UTF-16LE) and write to file (fooUTF16LE)"/>
	    <echo message="ant -Dinstring=foo -Dencoding=UTF-16LE -Doutfile=fooUTF16LE run.stringutfconverter"/>
	</else>
	</if>
    </target>

    <!--
	run.myencoder 

        Used to generate an encoded file preceded by N null characters.
       
        This utility takes a valid UTF-8 Json text file as input and generates
        a encoded version as output file with N null characters preceded by
        each character. For empty files it will just output the N null chars.

	Example)

	Read a UTF-8 (foo8) input file and generate an encoded version to output file (fooencoded) with each character preceded by N nulls.
	ant -Dnulls=4 -Dinfile=foo8 -Doutfile=fooencoded run.myencoder
    -->
    <target name="run.myencoder" description="Run the MyEncoder utility">
	<if>
	    <and>
		<isset property="nulls"/>
		<isset property="infile"/>
		<isset property="outfile"/>
	    </and>
	<then>
	    <echo message="Running MyEncoder utility"/>
	    <java fork="true"
	        failonerror="false"
	        classname="com.sun.ts.tests.jsonp.util.MyEncoder"
	        classpath="${ts.home}/classes">
	       <arg line="${nulls} ${infile} ${outfile}"/>
	    </java>
	</then>
	<else>
	    <echo message="Example:"/>
	    <echo message="-------"/>
	    <echo message="Read a UTF-8 (foo8) input file and generate an encoded version to output file (fooencoded) with each character preceded by N nulls"/>
	    <echo message="ant -Dnulls=4 -Dinfile=foo8 -Doutfile=fooencoded run.myencoder"/>
	</else>
	</if>
    </target>

    <target name="translatepath">
        <translatepath propname="ts.classpath" />
        <translatepath propname="bin.dir" />
    </target>

    <target name="buildsmoketests" description="Builds only the smoke tests">
         <if>
           <available file="${bin.dir}/smoke.xml" type="file" property="smoke.file.exists"/>
        <then>
           <ant antfile="${bin.dir}/smoke.xml" target="build" />
        </then>
        <else>
           <echo message="*** This feature is not enabled ***"/>
        </else>
        </if>
    </target>

    <target name="runsmoketests" description="Runs only the smoke tests">
        <if>
           <available file="${bin.dir}/smoke.xml" type="file" property="smoke.file.exists"/>
        <then>
           <ant antfile="${bin.dir}/smoke.xml" target="smoke" />
        </then>
        <else>
           <echo message="*** This feature is not enabled ***"/>
        </else>
        </if>
    </target>

    <!-- **************************************************************** -->
    <!-- Tasks for managing ts specific jar  -->
    <!-- ts specific jar (in this case jsonptck.jar) will be created in 
		ts.home/lib. -->

    <target name="tslib.clean" depends="translatepath">
         <delete failonerror="false">
         <fileset dir="${class.dir}">
                <include name="${lib.pkg.dir}/deliverable/tck/**" />
                <include name="${lib.pkg.dir}/deliverable/jsonp/**" />
                <include name="${lib.pkg.dir}/implementation/sun/common/**" />
        </fileset>
        </delete>
        <delete failonerror="false" file="${ts.home}/lib/${tslib.name}"/>
    </target>

    <target name="tslib.compile" depends="tslib.clean">
        <ts.javac includes="${lib.pkg.dir}/deliverable/tck/**
                            ${lib.pkg.dir}/deliverable/jsonp/**
                            ${lib.pkg.dir}/implementation/sun/common/SunRIURL.java">
            <classpath>
                <pathelement path="${ts.harness.classpath}" />
            </classpath>
        </ts.javac>
    </target>


    <target name="tslib" depends="tslib.compile">
        <tstamp/>
	<ts.lib.jar>
            <include name="${lib.pkg.dir}/deliverable/tck/**" />
            <include name="${lib.pkg.dir}/deliverable/jsonp/**" />
            <include name="${lib.pkg.dir}/implementation/sun/common/SunRIURL.class" />
        </ts.lib.jar>
    </target>

    <target name="jte.cleanup">
        <props.sanitizer file="${bin.dir}/ts.jte" quiet="true">
            <property name="jsonp.classes" value="" />
            <property name="jsonp.resources" value="$${ts.home}/src/com/sun/ts/tests/jsonp/resources" />
            <property name="jsonp.alt.provider.classes" value="jsonp.alt.provider.classes" />
        </props.sanitizer>
    </target>

</project>

